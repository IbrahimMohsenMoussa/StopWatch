
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000004b  00800060  00800060  00001454  2**0
                  ALLOC
  2 .stab         000026f4  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011da  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_1>
       8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_2>
       c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_7>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_10>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 3a       	cpi	r26, 0xAB	; 171
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <main>
      74:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <INT_0_Init>:
      7c:	81 30       	cpi	r24, 0x01	; 1
      7e:	e1 f0       	breq	.+56     	; 0xb8 <INT_0_Init+0x3c>
      80:	81 30       	cpi	r24, 0x01	; 1
      82:	78 f4       	brcc	.+30     	; 0xa2 <INT_0_Init+0x26>
      84:	85 b7       	in	r24, 0x35	; 53
      86:	82 60       	ori	r24, 0x02	; 2
      88:	85 bf       	out	0x35, r24	; 53
      8a:	85 b7       	in	r24, 0x35	; 53
      8c:	81 60       	ori	r24, 0x01	; 1
      8e:	85 bf       	out	0x35, r24	; 53
      90:	8b b7       	in	r24, 0x3b	; 59
      92:	80 64       	ori	r24, 0x40	; 64
      94:	8b bf       	out	0x3b, r24	; 59
      96:	78 94       	sei
      98:	70 93 81 00 	sts	0x0081, r23
      9c:	60 93 80 00 	sts	0x0080, r22
      a0:	08 95       	ret
      a2:	82 30       	cpi	r24, 0x02	; 2
      a4:	81 f0       	breq	.+32     	; 0xc6 <INT_0_Init+0x4a>
      a6:	83 30       	cpi	r24, 0x03	; 3
      a8:	99 f7       	brne	.-26     	; 0x90 <INT_0_Init+0x14>
      aa:	85 b7       	in	r24, 0x35	; 53
      ac:	8d 7f       	andi	r24, 0xFD	; 253
      ae:	85 bf       	out	0x35, r24	; 53
      b0:	85 b7       	in	r24, 0x35	; 53
      b2:	8e 7f       	andi	r24, 0xFE	; 254
      b4:	85 bf       	out	0x35, r24	; 53
      b6:	ec cf       	rjmp	.-40     	; 0x90 <INT_0_Init+0x14>
      b8:	85 b7       	in	r24, 0x35	; 53
      ba:	82 60       	ori	r24, 0x02	; 2
      bc:	85 bf       	out	0x35, r24	; 53
      be:	85 b7       	in	r24, 0x35	; 53
      c0:	8e 7f       	andi	r24, 0xFE	; 254
      c2:	85 bf       	out	0x35, r24	; 53
      c4:	e5 cf       	rjmp	.-54     	; 0x90 <INT_0_Init+0x14>
      c6:	85 b7       	in	r24, 0x35	; 53
      c8:	8d 7f       	andi	r24, 0xFD	; 253
      ca:	85 bf       	out	0x35, r24	; 53
      cc:	85 b7       	in	r24, 0x35	; 53
      ce:	81 60       	ori	r24, 0x01	; 1
      d0:	85 bf       	out	0x35, r24	; 53
      d2:	de cf       	rjmp	.-68     	; 0x90 <INT_0_Init+0x14>

000000d4 <INT_1_Init>:
	ptr2_int_0_flag = a_ptr2_flag;

}
void INT_1_Init(uint8_t a_detect, volatile uint8_t *a_ptr2_flag)
{
	switch (a_detect)
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	e1 f0       	breq	.+56     	; 0x110 <INT_1_Init+0x3c>
      d8:	81 30       	cpi	r24, 0x01	; 1
      da:	78 f4       	brcc	.+30     	; 0xfa <INT_1_Init+0x26>
	case FALLING_EDGE:
		SET_BIT(MCUCR, ISC11);
		CLR_BIT(MCUCR, ISC10);
		break;
	case RISING_EDGE:
		SET_BIT(MCUCR, ISC11);
      dc:	85 b7       	in	r24, 0x35	; 53
      de:	88 60       	ori	r24, 0x08	; 8
      e0:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, ISC10);
      e2:	85 b7       	in	r24, 0x35	; 53
      e4:	84 60       	ori	r24, 0x04	; 4
      e6:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR, ISC11);
		SET_BIT(MCUCR, ISC10);
		break;

	}
	SET_BIT(GICR, INT1);
      e8:	8b b7       	in	r24, 0x3b	; 59
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	8b bf       	out	0x3b, r24	; 59
	sei();
      ee:	78 94       	sei
	ptr2_int_1_flag = a_ptr2_flag;
      f0:	70 93 7f 00 	sts	0x007F, r23
      f4:	60 93 7e 00 	sts	0x007E, r22

}
      f8:	08 95       	ret
	ptr2_int_0_flag = a_ptr2_flag;

}
void INT_1_Init(uint8_t a_detect, volatile uint8_t *a_ptr2_flag)
{
	switch (a_detect)
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	81 f0       	breq	.+32     	; 0x11e <INT_1_Init+0x4a>
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	99 f7       	brne	.-26     	; 0xe8 <INT_1_Init+0x14>
		SET_BIT(MCUCR, ISC11);
		SET_BIT(MCUCR, ISC10);

		break;
	case LOW_LEVEL:
		CLR_BIT(MCUCR, ISC11);
     102:	85 b7       	in	r24, 0x35	; 53
     104:	87 7f       	andi	r24, 0xF7	; 247
     106:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR, ISC10);
     108:	85 b7       	in	r24, 0x35	; 53
     10a:	8b 7f       	andi	r24, 0xFB	; 251
     10c:	85 bf       	out	0x35, r24	; 53
     10e:	ec cf       	rjmp	.-40     	; 0xe8 <INT_1_Init+0x14>
void INT_1_Init(uint8_t a_detect, volatile uint8_t *a_ptr2_flag)
{
	switch (a_detect)
	{
	case FALLING_EDGE:
		SET_BIT(MCUCR, ISC11);
     110:	85 b7       	in	r24, 0x35	; 53
     112:	88 60       	ori	r24, 0x08	; 8
     114:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR, ISC10);
     116:	85 b7       	in	r24, 0x35	; 53
     118:	8b 7f       	andi	r24, 0xFB	; 251
     11a:	85 bf       	out	0x35, r24	; 53
     11c:	e5 cf       	rjmp	.-54     	; 0xe8 <INT_1_Init+0x14>
		CLR_BIT(MCUCR, ISC11);
		CLR_BIT(MCUCR, ISC10);

		break;
	case TOGGLE:
		CLR_BIT(MCUCR, ISC11);
     11e:	85 b7       	in	r24, 0x35	; 53
     120:	87 7f       	andi	r24, 0xF7	; 247
     122:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR, ISC10);
     124:	85 b7       	in	r24, 0x35	; 53
     126:	84 60       	ori	r24, 0x04	; 4
     128:	85 bf       	out	0x35, r24	; 53
     12a:	de cf       	rjmp	.-68     	; 0xe8 <INT_1_Init+0x14>

0000012c <INT_2_Init>:
	ptr2_int_1_flag = a_ptr2_flag;

}
void INT_2_Init(uint8_t a_detect, volatile uint8_t *a_ptr2_flag)
{
	switch (a_detect)
     12c:	88 23       	and	r24, r24
     12e:	61 f4       	brne	.+24     	; 0x148 <INT_2_Init+0x1c>
	case FALLING_EDGE:

		CLR_BIT(MCUCSR, ISC2);
		break;
	case RISING_EDGE:
		SET_BIT(MCUCSR, ISC2);
     130:	84 b7       	in	r24, 0x34	; 52
     132:	80 64       	ori	r24, 0x40	; 64
     134:	84 bf       	out	0x34, r24	; 52

		break;

	}
	SET_BIT(GICR, INT2);
     136:	8b b7       	in	r24, 0x3b	; 59
     138:	80 62       	ori	r24, 0x20	; 32
     13a:	8b bf       	out	0x3b, r24	; 59
	sei();
     13c:	78 94       	sei
	ptr2_int_2_flag = a_ptr2_flag;
     13e:	70 93 7d 00 	sts	0x007D, r23
     142:	60 93 7c 00 	sts	0x007C, r22

}
     146:	08 95       	ret
	ptr2_int_1_flag = a_ptr2_flag;

}
void INT_2_Init(uint8_t a_detect, volatile uint8_t *a_ptr2_flag)
{
	switch (a_detect)
     148:	81 30       	cpi	r24, 0x01	; 1
     14a:	a9 f7       	brne	.-22     	; 0x136 <INT_2_Init+0xa>
	{
	case FALLING_EDGE:

		CLR_BIT(MCUCSR, ISC2);
     14c:	84 b7       	in	r24, 0x34	; 52
     14e:	8f 7b       	andi	r24, 0xBF	; 191
     150:	84 bf       	out	0x34, r24	; 52
     152:	f1 cf       	rjmp	.-30     	; 0x136 <INT_2_Init+0xa>

00000154 <__vector_1>:
	sei();
	ptr2_int_2_flag = a_ptr2_flag;

}
ISR (INT0_vect)
{
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	8f 93       	push	r24
     160:	ef 93       	push	r30
     162:	ff 93       	push	r31
	*ptr2_int_0_flag = 1;
     164:	e0 91 80 00 	lds	r30, 0x0080
     168:	f0 91 81 00 	lds	r31, 0x0081
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 83       	st	Z, r24
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	8f 91       	pop	r24
     176:	0f 90       	pop	r0
     178:	0f be       	out	0x3f, r0	; 63
     17a:	0f 90       	pop	r0
     17c:	1f 90       	pop	r1
     17e:	18 95       	reti

00000180 <__vector_2>:
ISR (INT1_vect)
{
     180:	1f 92       	push	r1
     182:	0f 92       	push	r0
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	0f 92       	push	r0
     188:	11 24       	eor	r1, r1
     18a:	8f 93       	push	r24
     18c:	ef 93       	push	r30
     18e:	ff 93       	push	r31
	*ptr2_int_1_flag = 1;
     190:	e0 91 7e 00 	lds	r30, 0x007E
     194:	f0 91 7f 00 	lds	r31, 0x007F
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	80 83       	st	Z, r24
}
     19c:	ff 91       	pop	r31
     19e:	ef 91       	pop	r30
     1a0:	8f 91       	pop	r24
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	0f 90       	pop	r0
     1a8:	1f 90       	pop	r1
     1aa:	18 95       	reti

000001ac <__vector_3>:
ISR (INT2_vect)
{
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	8f 93       	push	r24
     1b8:	ef 93       	push	r30
     1ba:	ff 93       	push	r31
	*ptr2_int_2_flag = 1;
     1bc:	e0 91 7c 00 	lds	r30, 0x007C
     1c0:	f0 91 7d 00 	lds	r31, 0x007D
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 83       	st	Z, r24
}
     1c8:	ff 91       	pop	r31
     1ca:	ef 91       	pop	r30
     1cc:	8f 91       	pop	r24
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <GPIO_SetPinDirection>:
 *      Author: MSI
 */
#include "gpio.h"

void GPIO_SetPinDirection(uint8_t a_port, uint8_t a_pin, uint8_t state) {
	switch (a_port) {
     1d8:	82 34       	cpi	r24, 0x42	; 66
     1da:	69 f1       	breq	.+90     	; 0x236 <GPIO_SetPinDirection+0x5e>
     1dc:	83 34       	cpi	r24, 0x43	; 67
     1de:	28 f0       	brcs	.+10     	; 0x1ea <GPIO_SetPinDirection+0x12>
     1e0:	83 34       	cpi	r24, 0x43	; 67
     1e2:	d1 f1       	breq	.+116    	; 0x258 <GPIO_SetPinDirection+0x80>
     1e4:	84 34       	cpi	r24, 0x44	; 68
     1e6:	a9 f0       	breq	.+42     	; 0x212 <GPIO_SetPinDirection+0x3a>
     1e8:	08 95       	ret
     1ea:	81 34       	cpi	r24, 0x41	; 65
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <GPIO_SetPinDirection+0x10>
	case 'A':

		switch (state) {
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <GPIO_SetPinDirection+0x1c>
     1f2:	64 c0       	rjmp	.+200    	; 0x2bc <GPIO_SetPinDirection+0xe4>
     1f4:	41 30       	cpi	r20, 0x01	; 1
     1f6:	08 f0       	brcs	.+2      	; 0x1fa <GPIO_SetPinDirection+0x22>
     1f8:	92 c0       	rjmp	.+292    	; 0x31e <GPIO_SetPinDirection+0x146>
		case INPUT:
			CLR_BIT(DDRA, a_pin);
     1fa:	2a b3       	in	r18, 0x1a	; 26
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <GPIO_SetPinDirection+0x2e>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	6a 95       	dec	r22
     208:	e2 f7       	brpl	.-8      	; 0x202 <GPIO_SetPinDirection+0x2a>
     20a:	80 95       	com	r24
     20c:	82 23       	and	r24, r18
     20e:	8a bb       	out	0x1a, r24	; 26
     210:	08 95       	ret

		break;

	case 'D':

		switch (state) {
     212:	41 30       	cpi	r20, 0x01	; 1
     214:	09 f4       	brne	.+2      	; 0x218 <GPIO_SetPinDirection+0x40>
     216:	47 c0       	rjmp	.+142    	; 0x2a6 <GPIO_SetPinDirection+0xce>
     218:	41 30       	cpi	r20, 0x01	; 1
     21a:	08 f0       	brcs	.+2      	; 0x21e <GPIO_SetPinDirection+0x46>
     21c:	6d c0       	rjmp	.+218    	; 0x2f8 <GPIO_SetPinDirection+0x120>
		case INPUT:
			CLR_BIT(DDRD, a_pin);
     21e:	21 b3       	in	r18, 0x11	; 17
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <GPIO_SetPinDirection+0x52>
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <GPIO_SetPinDirection+0x4e>
     22e:	80 95       	com	r24
     230:	82 23       	and	r24, r18
     232:	81 bb       	out	0x11, r24	; 17
     234:	08 95       	ret
		}

		break;
	case 'B':

		switch (state) {
     236:	41 30       	cpi	r20, 0x01	; 1
     238:	59 f1       	breq	.+86     	; 0x290 <GPIO_SetPinDirection+0xb8>
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	08 f0       	brcs	.+2      	; 0x240 <GPIO_SetPinDirection+0x68>
     23e:	49 c0       	rjmp	.+146    	; 0x2d2 <GPIO_SetPinDirection+0xfa>
		case INPUT:
			CLR_BIT(DDRB, a_pin);
     240:	27 b3       	in	r18, 0x17	; 23
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_SetPinDirection+0x74>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	6a 95       	dec	r22
     24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_SetPinDirection+0x70>
     250:	80 95       	com	r24
     252:	82 23       	and	r24, r18
     254:	87 bb       	out	0x17, r24	; 23
     256:	08 95       	ret
		}

		break;
	case 'C':

		switch (state) {
     258:	41 30       	cpi	r20, 0x01	; 1
     25a:	79 f0       	breq	.+30     	; 0x27a <GPIO_SetPinDirection+0xa2>
     25c:	41 30       	cpi	r20, 0x01	; 1
     25e:	08 f0       	brcs	.+2      	; 0x262 <GPIO_SetPinDirection+0x8a>
     260:	71 c0       	rjmp	.+226    	; 0x344 <GPIO_SetPinDirection+0x16c>
		case INPUT:
			CLR_BIT(DDRC, a_pin);
     262:	24 b3       	in	r18, 0x14	; 20
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <GPIO_SetPinDirection+0x96>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <GPIO_SetPinDirection+0x92>
     272:	80 95       	com	r24
     274:	82 23       	and	r24, r18
     276:	84 bb       	out	0x14, r24	; 20
     278:	08 95       	ret
			break;
		case OUTPUT:
			SET_BIT(DDRC, a_pin);
     27a:	24 b3       	in	r18, 0x14	; 20
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_SetPinDirection+0xae>
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_SetPinDirection+0xaa>
     28a:	28 2b       	or	r18, r24
     28c:	24 bb       	out	0x14, r18	; 20
     28e:	08 95       	ret
		switch (state) {
		case INPUT:
			CLR_BIT(DDRB, a_pin);
			break;
		case OUTPUT:
			SET_BIT(DDRB, a_pin);
     290:	27 b3       	in	r18, 0x17	; 23
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	02 c0       	rjmp	.+4      	; 0x29c <GPIO_SetPinDirection+0xc4>
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	6a 95       	dec	r22
     29e:	e2 f7       	brpl	.-8      	; 0x298 <GPIO_SetPinDirection+0xc0>
     2a0:	28 2b       	or	r18, r24
     2a2:	27 bb       	out	0x17, r18	; 23
     2a4:	08 95       	ret
		switch (state) {
		case INPUT:
			CLR_BIT(DDRD, a_pin);
			break;
		case OUTPUT:
			SET_BIT(DDRD, a_pin);
     2a6:	21 b3       	in	r18, 0x11	; 17
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_SetPinDirection+0xda>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_SetPinDirection+0xd6>
     2b6:	28 2b       	or	r18, r24
     2b8:	21 bb       	out	0x11, r18	; 17
     2ba:	08 95       	ret
		switch (state) {
		case INPUT:
			CLR_BIT(DDRA, a_pin);
			break;
		case OUTPUT:
			SET_BIT(DDRA, a_pin);
     2bc:	2a b3       	in	r18, 0x1a	; 26
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <GPIO_SetPinDirection+0xf0>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <GPIO_SetPinDirection+0xec>
     2cc:	28 2b       	or	r18, r24
     2ce:	2a bb       	out	0x1a, r18	; 26
     2d0:	08 95       	ret
		}

		break;
	case 'B':

		switch (state) {
     2d2:	42 30       	cpi	r20, 0x02	; 2
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <GPIO_SetPinDirection+0x100>
     2d6:	88 cf       	rjmp	.-240    	; 0x1e8 <GPIO_SetPinDirection+0x10>
			break;
		case OUTPUT:
			SET_BIT(DDRB, a_pin);
			break;
		case INPUT_PULLUP:
			CLR_BIT(DDRB, a_pin);
     2d8:	37 b3       	in	r19, 0x17	; 23
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_SetPinDirection+0x10c>
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_SetPinDirection+0x108>
     2e8:	28 2f       	mov	r18, r24
     2ea:	20 95       	com	r18
     2ec:	23 23       	and	r18, r19
     2ee:	27 bb       	out	0x17, r18	; 23
			SET_BIT(PORTB, a_pin);
     2f0:	28 b3       	in	r18, 0x18	; 24
     2f2:	82 2b       	or	r24, r18
     2f4:	88 bb       	out	0x18, r24	; 24
     2f6:	08 95       	ret

		break;

	case 'D':

		switch (state) {
     2f8:	42 30       	cpi	r20, 0x02	; 2
     2fa:	09 f0       	breq	.+2      	; 0x2fe <GPIO_SetPinDirection+0x126>
     2fc:	75 cf       	rjmp	.-278    	; 0x1e8 <GPIO_SetPinDirection+0x10>
			break;
		case OUTPUT:
			SET_BIT(DDRD, a_pin);
			break;
		case INPUT_PULLUP:
			CLR_BIT(DDRD, a_pin);
     2fe:	31 b3       	in	r19, 0x11	; 17
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	02 c0       	rjmp	.+4      	; 0x30a <GPIO_SetPinDirection+0x132>
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	6a 95       	dec	r22
     30c:	e2 f7       	brpl	.-8      	; 0x306 <GPIO_SetPinDirection+0x12e>
     30e:	28 2f       	mov	r18, r24
     310:	20 95       	com	r18
     312:	23 23       	and	r18, r19
     314:	21 bb       	out	0x11, r18	; 17
			SET_BIT(PORTD, a_pin);
     316:	22 b3       	in	r18, 0x12	; 18
     318:	82 2b       	or	r24, r18
     31a:	82 bb       	out	0x12, r24	; 18
     31c:	08 95       	ret

void GPIO_SetPinDirection(uint8_t a_port, uint8_t a_pin, uint8_t state) {
	switch (a_port) {
	case 'A':

		switch (state) {
     31e:	42 30       	cpi	r20, 0x02	; 2
     320:	09 f0       	breq	.+2      	; 0x324 <GPIO_SetPinDirection+0x14c>
     322:	62 cf       	rjmp	.-316    	; 0x1e8 <GPIO_SetPinDirection+0x10>
			break;
		case OUTPUT:
			SET_BIT(DDRA, a_pin);
			break;
		case INPUT_PULLUP:
			CLR_BIT(DDRA, a_pin);
     324:	3a b3       	in	r19, 0x1a	; 26
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	02 c0       	rjmp	.+4      	; 0x330 <GPIO_SetPinDirection+0x158>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <GPIO_SetPinDirection+0x154>
     334:	28 2f       	mov	r18, r24
     336:	20 95       	com	r18
     338:	23 23       	and	r18, r19
     33a:	2a bb       	out	0x1a, r18	; 26
			SET_BIT(PORTA, a_pin);
     33c:	2b b3       	in	r18, 0x1b	; 27
     33e:	82 2b       	or	r24, r18
     340:	8b bb       	out	0x1b, r24	; 27
     342:	08 95       	ret
		}

		break;
	case 'C':

		switch (state) {
     344:	42 30       	cpi	r20, 0x02	; 2
     346:	09 f0       	breq	.+2      	; 0x34a <GPIO_SetPinDirection+0x172>
     348:	4f cf       	rjmp	.-354    	; 0x1e8 <GPIO_SetPinDirection+0x10>
			break;
		case OUTPUT:
			SET_BIT(DDRC, a_pin);
			break;
		case INPUT_PULLUP:
			CLR_BIT(DDRC, a_pin);
     34a:	34 b3       	in	r19, 0x14	; 20
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <GPIO_SetPinDirection+0x17e>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	6a 95       	dec	r22
     358:	e2 f7       	brpl	.-8      	; 0x352 <GPIO_SetPinDirection+0x17a>
     35a:	28 2f       	mov	r18, r24
     35c:	20 95       	com	r18
     35e:	23 23       	and	r18, r19
     360:	24 bb       	out	0x14, r18	; 20
			SET_BIT(PORTC, a_pin);
     362:	25 b3       	in	r18, 0x15	; 21
     364:	82 2b       	or	r24, r18
     366:	85 bb       	out	0x15, r24	; 21
     368:	08 95       	ret

0000036a <GPIO_WritePin>:

		break;
	}
}
void GPIO_WritePin(uint8_t a_port, uint8_t a_pin, uint8_t a_state) {
	switch (a_port) {
     36a:	82 34       	cpi	r24, 0x42	; 66
     36c:	39 f1       	breq	.+78     	; 0x3bc <GPIO_WritePin+0x52>
     36e:	83 34       	cpi	r24, 0x43	; 67
     370:	28 f0       	brcs	.+10     	; 0x37c <GPIO_WritePin+0x12>
     372:	83 34       	cpi	r24, 0x43	; 67
     374:	89 f1       	breq	.+98     	; 0x3d8 <GPIO_WritePin+0x6e>
     376:	84 34       	cpi	r24, 0x44	; 68
     378:	91 f0       	breq	.+36     	; 0x39e <GPIO_WritePin+0x34>
     37a:	08 95       	ret
     37c:	81 34       	cpi	r24, 0x41	; 65
     37e:	e9 f7       	brne	.-6      	; 0x37a <GPIO_WritePin+0x10>
	case 'A':

		switch (a_state) {
     380:	44 23       	and	r20, r20
     382:	09 f0       	breq	.+2      	; 0x386 <GPIO_WritePin+0x1c>
     384:	61 c0       	rjmp	.+194    	; 0x448 <GPIO_WritePin+0xde>
		case LOW:
			CLR_BIT(PORTA, a_pin);
     386:	2b b3       	in	r18, 0x1b	; 27
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 c0       	rjmp	.+4      	; 0x392 <GPIO_WritePin+0x28>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	6a 95       	dec	r22
     394:	e2 f7       	brpl	.-8      	; 0x38e <GPIO_WritePin+0x24>
     396:	80 95       	com	r24
     398:	82 23       	and	r24, r18
     39a:	8b bb       	out	0x1b, r24	; 27
     39c:	08 95       	ret

		break;

	case 'D':

		switch (a_state) {
     39e:	44 23       	and	r20, r20
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <GPIO_WritePin+0x3a>
     3a2:	44 c0       	rjmp	.+136    	; 0x42c <GPIO_WritePin+0xc2>
		case LOW:
			CLR_BIT(PORTD, a_pin);
     3a4:	22 b3       	in	r18, 0x12	; 18
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_WritePin+0x46>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	6a 95       	dec	r22
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_WritePin+0x42>
     3b4:	80 95       	com	r24
     3b6:	82 23       	and	r24, r18
     3b8:	82 bb       	out	0x12, r24	; 18
     3ba:	08 95       	ret
		}

		break;
	case 'B':

		switch (a_state) {
     3bc:	44 23       	and	r20, r20
     3be:	41 f5       	brne	.+80     	; 0x410 <GPIO_WritePin+0xa6>
		case LOW:
			CLR_BIT(PORTB, a_pin);
     3c0:	28 b3       	in	r18, 0x18	; 24
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <GPIO_WritePin+0x62>
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	6a 95       	dec	r22
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <GPIO_WritePin+0x5e>
     3d0:	80 95       	com	r24
     3d2:	82 23       	and	r24, r18
     3d4:	88 bb       	out	0x18, r24	; 24
     3d6:	08 95       	ret
		}

		break;
	case 'C':

		switch (a_state) {
     3d8:	44 23       	and	r20, r20
     3da:	61 f4       	brne	.+24     	; 0x3f4 <GPIO_WritePin+0x8a>
		case LOW:
			CLR_BIT(PORTC, a_pin);
     3dc:	25 b3       	in	r18, 0x15	; 21
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <GPIO_WritePin+0x7e>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <GPIO_WritePin+0x7a>
     3ec:	80 95       	com	r24
     3ee:	82 23       	and	r24, r18
     3f0:	85 bb       	out	0x15, r24	; 21
     3f2:	08 95       	ret
		}

		break;
	case 'C':

		switch (a_state) {
     3f4:	41 30       	cpi	r20, 0x01	; 1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <GPIO_WritePin+0x90>
     3f8:	c0 cf       	rjmp	.-128    	; 0x37a <GPIO_WritePin+0x10>
		case LOW:
			CLR_BIT(PORTC, a_pin);
			break;
		case HIGH:
			SET_BIT(PORTC, a_pin);
     3fa:	25 b3       	in	r18, 0x15	; 21
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <GPIO_WritePin+0x9c>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	6a 95       	dec	r22
     408:	e2 f7       	brpl	.-8      	; 0x402 <GPIO_WritePin+0x98>
     40a:	28 2b       	or	r18, r24
     40c:	25 bb       	out	0x15, r18	; 21
     40e:	08 95       	ret
		}

		break;
	case 'B':

		switch (a_state) {
     410:	41 30       	cpi	r20, 0x01	; 1
     412:	09 f0       	breq	.+2      	; 0x416 <GPIO_WritePin+0xac>
     414:	b2 cf       	rjmp	.-156    	; 0x37a <GPIO_WritePin+0x10>
		case LOW:
			CLR_BIT(PORTB, a_pin);
			break;
		case HIGH:
			SET_BIT(PORTB, a_pin);
     416:	28 b3       	in	r18, 0x18	; 24
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_WritePin+0xb8>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	6a 95       	dec	r22
     424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_WritePin+0xb4>
     426:	28 2b       	or	r18, r24
     428:	28 bb       	out	0x18, r18	; 24
     42a:	08 95       	ret

		break;

	case 'D':

		switch (a_state) {
     42c:	41 30       	cpi	r20, 0x01	; 1
     42e:	09 f0       	breq	.+2      	; 0x432 <GPIO_WritePin+0xc8>
     430:	a4 cf       	rjmp	.-184    	; 0x37a <GPIO_WritePin+0x10>
		case LOW:
			CLR_BIT(PORTD, a_pin);
			break;
		case HIGH:
			SET_BIT(PORTD, a_pin);
     432:	22 b3       	in	r18, 0x12	; 18
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <GPIO_WritePin+0xd4>
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	6a 95       	dec	r22
     440:	e2 f7       	brpl	.-8      	; 0x43a <GPIO_WritePin+0xd0>
     442:	28 2b       	or	r18, r24
     444:	22 bb       	out	0x12, r18	; 18
     446:	08 95       	ret
}
void GPIO_WritePin(uint8_t a_port, uint8_t a_pin, uint8_t a_state) {
	switch (a_port) {
	case 'A':

		switch (a_state) {
     448:	41 30       	cpi	r20, 0x01	; 1
     44a:	09 f0       	breq	.+2      	; 0x44e <GPIO_WritePin+0xe4>
     44c:	96 cf       	rjmp	.-212    	; 0x37a <GPIO_WritePin+0x10>
		case LOW:
			CLR_BIT(PORTA, a_pin);
			break;
		case HIGH:
			SET_BIT(PORTA, a_pin);
     44e:	2b b3       	in	r18, 0x1b	; 27
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <GPIO_WritePin+0xf0>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <GPIO_WritePin+0xec>
     45e:	28 2b       	or	r18, r24
     460:	2b bb       	out	0x1b, r18	; 27
     462:	08 95       	ret

00000464 <GPIO_TooglePin>:

		break;
	}
}
void GPIO_TooglePin(uint8_t a_port, uint8_t pin) {
	switch (a_port) {
     464:	82 34       	cpi	r24, 0x42	; 66
     466:	f9 f0       	breq	.+62     	; 0x4a6 <GPIO_TooglePin+0x42>
     468:	83 34       	cpi	r24, 0x43	; 67
     46a:	28 f0       	brcs	.+10     	; 0x476 <GPIO_TooglePin+0x12>
     46c:	83 34       	cpi	r24, 0x43	; 67
     46e:	31 f1       	breq	.+76     	; 0x4bc <GPIO_TooglePin+0x58>
     470:	84 34       	cpi	r24, 0x44	; 68
     472:	71 f0       	breq	.+28     	; 0x490 <GPIO_TooglePin+0x2c>
     474:	08 95       	ret
     476:	81 34       	cpi	r24, 0x41	; 65
     478:	e9 f7       	brne	.-6      	; 0x474 <GPIO_TooglePin+0x10>
	case 'A':
		TOGGLE_BIT(PORTA, pin);
     47a:	2b b3       	in	r18, 0x1b	; 27
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <GPIO_TooglePin+0x22>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	6a 95       	dec	r22
     488:	e2 f7       	brpl	.-8      	; 0x482 <GPIO_TooglePin+0x1e>
     48a:	28 27       	eor	r18, r24
     48c:	2b bb       	out	0x1b, r18	; 27
     48e:	08 95       	ret
		break;
	case 'C':
		TOGGLE_BIT(PORTC, pin);
		break;
	case 'D':
		TOGGLE_BIT(PORTD, pin);
     490:	22 b3       	in	r18, 0x12	; 18
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	02 c0       	rjmp	.+4      	; 0x49c <GPIO_TooglePin+0x38>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	6a 95       	dec	r22
     49e:	e2 f7       	brpl	.-8      	; 0x498 <GPIO_TooglePin+0x34>
     4a0:	28 27       	eor	r18, r24
     4a2:	22 bb       	out	0x12, r18	; 18
     4a4:	08 95       	ret
	switch (a_port) {
	case 'A':
		TOGGLE_BIT(PORTA, pin);
		break;
	case 'B':
		TOGGLE_BIT(PORTB, pin);
     4a6:	28 b3       	in	r18, 0x18	; 24
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <GPIO_TooglePin+0x4e>
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	6a 95       	dec	r22
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <GPIO_TooglePin+0x4a>
     4b6:	28 27       	eor	r18, r24
     4b8:	28 bb       	out	0x18, r18	; 24
     4ba:	08 95       	ret
		break;
	case 'C':
		TOGGLE_BIT(PORTC, pin);
     4bc:	25 b3       	in	r18, 0x15	; 21
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <GPIO_TooglePin+0x64>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <GPIO_TooglePin+0x60>
     4cc:	28 27       	eor	r18, r24
     4ce:	25 bb       	out	0x15, r18	; 21
     4d0:	08 95       	ret

000004d2 <GPIO_ReadPin>:
		break;
	}
}

uint8_t GPIO_ReadPin(uint8_t a_port, uint8_t pin) {
	switch (a_port) {
     4d2:	82 34       	cpi	r24, 0x42	; 66
     4d4:	09 f1       	breq	.+66     	; 0x518 <GPIO_ReadPin+0x46>
     4d6:	83 34       	cpi	r24, 0x43	; 67
     4d8:	38 f0       	brcs	.+14     	; 0x4e8 <GPIO_ReadPin+0x16>
     4da:	83 34       	cpi	r24, 0x43	; 67
     4dc:	41 f1       	breq	.+80     	; 0x52e <GPIO_ReadPin+0x5c>
     4de:	84 34       	cpi	r24, 0x44	; 68
     4e0:	81 f0       	breq	.+32     	; 0x502 <GPIO_ReadPin+0x30>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
		break;
	default:
		return 0;
		break;
	}
}
     4e4:	82 2f       	mov	r24, r18
     4e6:	08 95       	ret
		break;
	}
}

uint8_t GPIO_ReadPin(uint8_t a_port, uint8_t pin) {
	switch (a_port) {
     4e8:	81 34       	cpi	r24, 0x41	; 65
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <GPIO_ReadPin+0x10>
	case 'A':
		return( PINA & (1 << pin));
     4ec:	29 b3       	in	r18, 0x19	; 25
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <GPIO_ReadPin+0x26>
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <GPIO_ReadPin+0x22>
     4fc:	28 23       	and	r18, r24
		break;
	default:
		return 0;
		break;
	}
}
     4fe:	82 2f       	mov	r24, r18
     500:	08 95       	ret
		break;
	case 'C':
		return (PINC & (1 << pin));
		break;
	case 'D':
		return (PIND & (1 << pin));
     502:	20 b3       	in	r18, 0x10	; 16
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <GPIO_ReadPin+0x3c>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	6a 95       	dec	r22
     510:	e2 f7       	brpl	.-8      	; 0x50a <GPIO_ReadPin+0x38>
     512:	28 23       	and	r18, r24
		break;
	default:
		return 0;
		break;
	}
}
     514:	82 2f       	mov	r24, r18
     516:	08 95       	ret
	switch (a_port) {
	case 'A':
		return( PINA & (1 << pin));
		break;
	case 'B':
		return (PINB & (1 << pin));
     518:	26 b3       	in	r18, 0x16	; 22
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	02 c0       	rjmp	.+4      	; 0x524 <GPIO_ReadPin+0x52>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	6a 95       	dec	r22
     526:	e2 f7       	brpl	.-8      	; 0x520 <GPIO_ReadPin+0x4e>
     528:	28 23       	and	r18, r24
		break;
	default:
		return 0;
		break;
	}
}
     52a:	82 2f       	mov	r24, r18
     52c:	08 95       	ret
		break;
	case 'B':
		return (PINB & (1 << pin));
		break;
	case 'C':
		return (PINC & (1 << pin));
     52e:	23 b3       	in	r18, 0x13	; 19
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <GPIO_ReadPin+0x68>
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	6a 95       	dec	r22
     53c:	e2 f7       	brpl	.-8      	; 0x536 <GPIO_ReadPin+0x64>
     53e:	28 23       	and	r18, r24
		break;
	default:
		return 0;
		break;
	}
}
     540:	82 2f       	mov	r24, r18
     542:	08 95       	ret

00000544 <Disp_7_Segment>:
	*(a_disp->multi_ddr) |= (g_7_segment_disp->multi_bitMask);
	GPIO_SetPinDirection(g_7_segment_disp->decimal_port, g_7_segment_disp->decimal_pin, OUTPUT);

}

void Disp_7_Segment(uint8_t *a_data) {
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
	*(g_7_segment_disp->multi_port) &= ~(g_7_segment_disp->multi_bitMask);
     554:	e0 91 60 00 	lds	r30, 0x0060
     558:	f0 91 61 00 	lds	r31, 0x0061
     55c:	a7 81       	ldd	r26, Z+7	; 0x07
     55e:	b0 85       	ldd	r27, Z+8	; 0x08
     560:	9c 91       	ld	r25, X
     562:	82 85       	ldd	r24, Z+10	; 0x0a
     564:	80 95       	com	r24
     566:	89 23       	and	r24, r25
     568:	8c 93       	st	X, r24
	for (uint8_t i = 0; i < g_7_segment_disp->_7_segment_num; i++) {
     56a:	e0 91 60 00 	lds	r30, 0x0060
     56e:	f0 91 61 00 	lds	r31, 0x0061
     572:	80 81       	ld	r24, Z
     574:	88 23       	and	r24, r24
     576:	09 f4       	brne	.+2      	; 0x57a <Disp_7_Segment+0x36>
     578:	5f c0       	rjmp	.+190    	; 0x638 <Disp_7_Segment+0xf4>
     57a:	10 e0       	ldi	r17, 0x00	; 0
		//Select_Disp(i);

		SET_BIT(*(g_7_segment_disp->multi_port), i);
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	c9 2e       	mov	r12, r25
     580:	d1 2c       	mov	r13, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     582:	80 ea       	ldi	r24, 0xA0	; 160
     584:	e8 2e       	mov	r14, r24
     586:	8f e0       	ldi	r24, 0x0F	; 15
     588:	f8 2e       	mov	r15, r24
     58a:	1f c0       	rjmp	.+62     	; 0x5ca <Disp_7_Segment+0x86>
		*(g_7_segment_disp->data_port) |= (a_data[i]);
		if (i == 1 || i == 3)
			GPIO_WritePin(g_7_segment_disp->decimal_port, g_7_segment_disp->decimal_pin, LOW);

		else
			GPIO_WritePin(g_7_segment_disp->decimal_port, g_7_segment_disp->decimal_pin, HIGH);
     58c:	e0 91 60 00 	lds	r30, 0x0060
     590:	f0 91 61 00 	lds	r31, 0x0061
     594:	83 85       	ldd	r24, Z+11	; 0x0b
     596:	64 85       	ldd	r22, Z+12	; 0x0c
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     59e:	c7 01       	movw	r24, r14
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <Disp_7_Segment+0x5c>

		_delay_ms(1);
		//delay(1);
		*(g_7_segment_disp->multi_port) &= ~(g_7_segment_disp->multi_bitMask);
     5a4:	e0 91 60 00 	lds	r30, 0x0060
     5a8:	f0 91 61 00 	lds	r31, 0x0061
     5ac:	a7 81       	ldd	r26, Z+7	; 0x07
     5ae:	b0 85       	ldd	r27, Z+8	; 0x08
     5b0:	9c 91       	ld	r25, X
     5b2:	82 85       	ldd	r24, Z+10	; 0x0a
     5b4:	80 95       	com	r24
     5b6:	89 23       	and	r24, r25
     5b8:	8c 93       	st	X, r24

}

void Disp_7_Segment(uint8_t *a_data) {
	*(g_7_segment_disp->multi_port) &= ~(g_7_segment_disp->multi_bitMask);
	for (uint8_t i = 0; i < g_7_segment_disp->_7_segment_num; i++) {
     5ba:	1f 5f       	subi	r17, 0xFF	; 255
     5bc:	e0 91 60 00 	lds	r30, 0x0060
     5c0:	f0 91 61 00 	lds	r31, 0x0061
     5c4:	80 81       	ld	r24, Z
     5c6:	18 17       	cp	r17, r24
     5c8:	b8 f5       	brcc	.+110    	; 0x638 <Disp_7_Segment+0xf4>
		//Select_Disp(i);

		SET_BIT(*(g_7_segment_disp->multi_port), i);
     5ca:	07 80       	ldd	r0, Z+7	; 0x07
     5cc:	f0 85       	ldd	r31, Z+8	; 0x08
     5ce:	e0 2d       	mov	r30, r0
     5d0:	20 81       	ld	r18, Z
     5d2:	c6 01       	movw	r24, r12
     5d4:	01 2e       	mov	r0, r17
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <Disp_7_Segment+0x98>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	0a 94       	dec	r0
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <Disp_7_Segment+0x94>
     5e0:	28 2b       	or	r18, r24
     5e2:	20 83       	st	Z, r18
		*(g_7_segment_disp->data_port)&= ~(g_7_segment_disp->data_bitMask);
     5e4:	e0 91 60 00 	lds	r30, 0x0060
     5e8:	f0 91 61 00 	lds	r31, 0x0061
     5ec:	a5 81       	ldd	r26, Z+5	; 0x05
     5ee:	b6 81       	ldd	r27, Z+6	; 0x06
     5f0:	9c 91       	ld	r25, X
     5f2:	81 85       	ldd	r24, Z+9	; 0x09
     5f4:	80 95       	com	r24
     5f6:	89 23       	and	r24, r25
     5f8:	8c 93       	st	X, r24
		a_data[i] &= ~(_7_SEGMENT_DATA_RESET_BIT_MASK);
     5fa:	fe 01       	movw	r30, r28
     5fc:	e1 0f       	add	r30, r17
     5fe:	f1 1d       	adc	r31, r1
     600:	80 81       	ld	r24, Z
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	80 83       	st	Z, r24
		*(g_7_segment_disp->data_port) |= (a_data[i]);
     606:	e0 91 60 00 	lds	r30, 0x0060
     60a:	f0 91 61 00 	lds	r31, 0x0061
     60e:	05 80       	ldd	r0, Z+5	; 0x05
     610:	f6 81       	ldd	r31, Z+6	; 0x06
     612:	e0 2d       	mov	r30, r0
     614:	90 81       	ld	r25, Z
     616:	89 2b       	or	r24, r25
     618:	80 83       	st	Z, r24
		if (i == 1 || i == 3)
     61a:	11 30       	cpi	r17, 0x01	; 1
     61c:	19 f0       	breq	.+6      	; 0x624 <Disp_7_Segment+0xe0>
     61e:	13 30       	cpi	r17, 0x03	; 3
     620:	09 f0       	breq	.+2      	; 0x624 <Disp_7_Segment+0xe0>
     622:	b4 cf       	rjmp	.-152    	; 0x58c <Disp_7_Segment+0x48>
			GPIO_WritePin(g_7_segment_disp->decimal_port, g_7_segment_disp->decimal_pin, LOW);
     624:	e0 91 60 00 	lds	r30, 0x0060
     628:	f0 91 61 00 	lds	r31, 0x0061
     62c:	83 85       	ldd	r24, Z+11	; 0x0b
     62e:	64 85       	ldd	r22, Z+12	; 0x0c
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     636:	b3 cf       	rjmp	.-154    	; 0x59e <Disp_7_Segment+0x5a>
		_delay_ms(1);
		//delay(1);
		*(g_7_segment_disp->multi_port) &= ~(g_7_segment_disp->multi_bitMask);

	}
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	08 95       	ret

00000648 <Seven_Seg_INIT>:
 *      Author: MSI
 */
#include"multi_7_segment.h"

struct multi_7_segment* g_7_segment_disp = 0;
void Seven_Seg_INIT( struct multi_7_segment* a_disp) {
     648:	fc 01       	movw	r30, r24

	g_7_segment_disp=a_disp;
     64a:	90 93 61 00 	sts	0x0061, r25
     64e:	80 93 60 00 	sts	0x0060, r24
	*(a_disp->data_ddr) |= (g_7_segment_disp->data_bitMask);
     652:	a1 81       	ldd	r26, Z+1	; 0x01
     654:	b2 81       	ldd	r27, Z+2	; 0x02
     656:	8c 91       	ld	r24, X
     658:	91 85       	ldd	r25, Z+9	; 0x09
     65a:	89 2b       	or	r24, r25
     65c:	8c 93       	st	X, r24
	*(a_disp->multi_ddr) |= (g_7_segment_disp->multi_bitMask);
     65e:	a3 81       	ldd	r26, Z+3	; 0x03
     660:	b4 81       	ldd	r27, Z+4	; 0x04
     662:	8c 91       	ld	r24, X
     664:	e0 91 60 00 	lds	r30, 0x0060
     668:	f0 91 61 00 	lds	r31, 0x0061
     66c:	92 85       	ldd	r25, Z+10	; 0x0a
     66e:	89 2b       	or	r24, r25
     670:	8c 93       	st	X, r24
	GPIO_SetPinDirection(g_7_segment_disp->decimal_port, g_7_segment_disp->decimal_pin, OUTPUT);
     672:	e0 91 60 00 	lds	r30, 0x0060
     676:	f0 91 61 00 	lds	r31, 0x0061
     67a:	83 85       	ldd	r24, Z+11	; 0x0b
     67c:	64 85       	ldd	r22, Z+12	; 0x0c
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>

}
     684:	08 95       	ret

00000686 <Pushbutton_Pressed>:
		GPIO_SetPinDirection(a_button->port, a_button->pin, INPUT);
	}

}
uint8_t Pushbutton_Pressed(struct pushbutton *a_button)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
	uint8_t l_val = 0;

	if (!GPIO_ReadPin(a_button->port, a_button->pin))
     68c:	88 81       	ld	r24, Y
     68e:	69 81       	ldd	r22, Y+1	; 0x01
     690:	0e 94 69 02 	call	0x4d2	; 0x4d2 <GPIO_ReadPin>
     694:	88 23       	and	r24, r24
     696:	39 f4       	brne	.+14     	; 0x6a6 <Pushbutton_Pressed+0x20>
	{
		if (!a_button->state)
     698:	8a 81       	ldd	r24, Y+2	; 0x02
     69a:	88 23       	and	r24, r24
     69c:	31 f0       	breq	.+12     	; 0x6aa <Pushbutton_Pressed+0x24>
		}
	}
	else
	{
		l_val = 0;
		a_button->state = 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0

	}
	return l_val;
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret
		}
	}
	else
	{
		l_val = 0;
		a_button->state = 0;
     6a6:	1a 82       	std	Y+2, r1	; 0x02
     6a8:	fa cf       	rjmp	.-12     	; 0x69e <Pushbutton_Pressed+0x18>
	if (!GPIO_ReadPin(a_button->port, a_button->pin))
	{
		if (!a_button->state)
		{
			l_val = 1;
			a_button->state = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	8a 83       	std	Y+2, r24	; 0x02
		l_val = 0;
		a_button->state = 0;

	}
	return l_val;
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <Pushbutton_Init>:
 *      Author: MSI
 */
#include"pushbutton.h"
void Pushbutton_Init(struct pushbutton *a_button, uint8_t a_port, uint8_t a_pin,
		uint8_t a_int_pull)
{
     6b4:	fc 01       	movw	r30, r24
	a_button->port = a_port;
     6b6:	60 83       	st	Z, r22
	a_button->pin = a_pin;
     6b8:	41 83       	std	Z+1, r20	; 0x01
	a_button->state = 0;
     6ba:	12 82       	std	Z+2, r1	; 0x02
	a_button->debounce_time=0;
     6bc:	13 82       	std	Z+3, r1	; 0x03

	if (a_int_pull == INPUT_PULLUP)
     6be:	22 30       	cpi	r18, 0x02	; 2
     6c0:	31 f0       	breq	.+12     	; 0x6ce <Pushbutton_Init+0x1a>
	{
		GPIO_SetPinDirection(a_button->port, a_button->pin, INPUT_PULLUP);
	}
	else
	{
		GPIO_SetPinDirection(a_button->port, a_button->pin, INPUT);
     6c2:	86 2f       	mov	r24, r22
     6c4:	64 2f       	mov	r22, r20
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
     6cc:	08 95       	ret
	a_button->state = 0;
	a_button->debounce_time=0;

	if (a_int_pull == INPUT_PULLUP)
	{
		GPIO_SetPinDirection(a_button->port, a_button->pin, INPUT_PULLUP);
     6ce:	86 2f       	mov	r24, r22
     6d0:	64 2f       	mov	r22, r20
     6d2:	42 e0       	ldi	r20, 0x02	; 2
     6d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
     6d8:	08 95       	ret

000006da <Timer1_Counter_INC>:

	}

}
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
     6da:	80 91 62 00 	lds	r24, 0x0062
     6de:	8b 33       	cpi	r24, 0x3B	; 59
     6e0:	b0 f0       	brcs	.+44     	; 0x70e <Timer1_Counter_INC+0x34>
		g_time[SECS]++;
	} else {
		if (g_time[MINS] < MAX_mins_sec) {
     6e2:	80 91 63 00 	lds	r24, 0x0063
     6e6:	8b 33       	cpi	r24, 0x3B	; 59
     6e8:	50 f0       	brcs	.+20     	; 0x6fe <Timer1_Counter_INC+0x24>
			g_time[MINS]++;
			g_time[SECS] = MIN_mins_sec;
		} else {
			g_time[HOURS]++;
     6ea:	80 91 64 00 	lds	r24, 0x0064
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 64 00 	sts	0x0064, r24
			g_time[MINS] = MIN_mins_sec;
     6f4:	10 92 63 00 	sts	0x0063, r1
			g_time[SECS] = MIN_mins_sec;
     6f8:	10 92 62 00 	sts	0x0062, r1
     6fc:	08 95       	ret
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
		g_time[SECS]++;
	} else {
		if (g_time[MINS] < MAX_mins_sec) {
			g_time[MINS]++;
     6fe:	80 91 63 00 	lds	r24, 0x0063
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	80 93 63 00 	sts	0x0063, r24
			g_time[SECS] = MIN_mins_sec;
     708:	10 92 62 00 	sts	0x0062, r1
     70c:	08 95       	ret
	}

}
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
		g_time[SECS]++;
     70e:	80 91 62 00 	lds	r24, 0x0062
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	80 93 62 00 	sts	0x0062, r24
     718:	08 95       	ret

0000071a <Timer1_Counter_DEC>:
		}
	}

}
void Timer1_Counter_DEC() {
	if (g_time[SECS] > MIN_mins_sec) {
     71a:	80 91 62 00 	lds	r24, 0x0062
     71e:	88 23       	and	r24, r24
     720:	a9 f0       	breq	.+42     	; 0x74c <Timer1_Counter_DEC+0x32>
		g_time[SECS]--;
     722:	80 91 62 00 	lds	r24, 0x0062
     726:	81 50       	subi	r24, 0x01	; 1
     728:	80 93 62 00 	sts	0x0062, r24
				g_end_countdown_flag = TRUE;

			}
		}
	}
	if (g_time[SECS] == MIN_mins_sec && g_time[MINS] == MIN_mins_sec
     72c:	80 91 62 00 	lds	r24, 0x0062
     730:	88 23       	and	r24, r24
     732:	59 f4       	brne	.+22     	; 0x74a <Timer1_Counter_DEC+0x30>
     734:	80 91 63 00 	lds	r24, 0x0063
     738:	88 23       	and	r24, r24
     73a:	39 f4       	brne	.+14     	; 0x74a <Timer1_Counter_DEC+0x30>
     73c:	80 91 64 00 	lds	r24, 0x0064
     740:	88 23       	and	r24, r24
     742:	19 f4       	brne	.+6      	; 0x74a <Timer1_Counter_DEC+0x30>
			&& g_time[HOURS] == MIN_HOURS) {
		g_end_countdown_flag = TRUE;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 68 00 	sts	0x0068, r24
     74a:	08 95       	ret
}
void Timer1_Counter_DEC() {
	if (g_time[SECS] > MIN_mins_sec) {
		g_time[SECS]--;
	} else {
		if (g_time[MINS] > MIN_mins_sec) {
     74c:	80 91 63 00 	lds	r24, 0x0063
     750:	88 23       	and	r24, r24
     752:	49 f0       	breq	.+18     	; 0x766 <Timer1_Counter_DEC+0x4c>
			g_time[MINS]--;
     754:	80 91 63 00 	lds	r24, 0x0063
     758:	81 50       	subi	r24, 0x01	; 1
     75a:	80 93 63 00 	sts	0x0063, r24
			g_time[SECS] = MAX_mins_sec;
     75e:	8b e3       	ldi	r24, 0x3B	; 59
     760:	80 93 62 00 	sts	0x0062, r24
     764:	e3 cf       	rjmp	.-58     	; 0x72c <Timer1_Counter_DEC+0x12>
		} else {
			if (g_time[HOURS] > MIN_HOURS) {
     766:	80 91 64 00 	lds	r24, 0x0064
     76a:	88 23       	and	r24, r24
     76c:	59 f0       	breq	.+22     	; 0x784 <Timer1_Counter_DEC+0x6a>
				g_time[HOURS]--;
     76e:	80 91 64 00 	lds	r24, 0x0064
     772:	81 50       	subi	r24, 0x01	; 1
     774:	80 93 64 00 	sts	0x0064, r24
				g_time[SECS] = MAX_mins_sec;
     778:	8b e3       	ldi	r24, 0x3B	; 59
     77a:	80 93 62 00 	sts	0x0062, r24
				g_time[MINS] = MAX_mins_sec;
     77e:	80 93 63 00 	sts	0x0063, r24
     782:	d4 cf       	rjmp	.-88     	; 0x72c <Timer1_Counter_DEC+0x12>
			} else {
				g_end_countdown_flag = TRUE;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 68 00 	sts	0x0068, r24
     78a:	d0 cf       	rjmp	.-96     	; 0x72c <Timer1_Counter_DEC+0x12>

0000078c <StopWatch_Reset_time>:

}

// resets time in time_Calculator(uint8_t*) function
void  StopWatch_Reset_time() {
	TCNT0 = MIN_HOURS;
     78c:	12 be       	out	0x32, r1	; 50
	g_time[HOURS] = MIN_HOURS;
     78e:	10 92 64 00 	sts	0x0064, r1
	g_time[MINS] = MIN_mins_sec;
     792:	e3 e6       	ldi	r30, 0x63	; 99
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	10 82       	st	Z, r1
	g_time[SECS] = MIN_mins_sec;
     798:	12 92       	st	-Z, r1
}
     79a:	08 95       	ret

0000079c <INC_MIN>:
}
void DEC_SEC() {
	Timer1_Counter_DEC();
}
void INC_MIN() {
	if (g_time[MINS] < MAX_mins_sec) {
     79c:	80 91 63 00 	lds	r24, 0x0063
     7a0:	8b 33       	cpi	r24, 0x3B	; 59
     7a2:	40 f0       	brcs	.+16     	; 0x7b4 <INC_MIN+0x18>
		g_time[MINS]++;
	} else {
		g_time[HOURS]++;
     7a4:	80 91 64 00 	lds	r24, 0x0064
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	80 93 64 00 	sts	0x0064, r24
		g_time[MINS] = MIN_mins_sec;
     7ae:	10 92 63 00 	sts	0x0063, r1
     7b2:	08 95       	ret
void DEC_SEC() {
	Timer1_Counter_DEC();
}
void INC_MIN() {
	if (g_time[MINS] < MAX_mins_sec) {
		g_time[MINS]++;
     7b4:	80 91 63 00 	lds	r24, 0x0063
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	80 93 63 00 	sts	0x0063, r24
     7be:	08 95       	ret

000007c0 <DEC_MIN>:
		g_time[MINS] = MIN_mins_sec;

	}
}
void DEC_MIN() {
	if (g_time[MINS] > MIN_mins_sec) {
     7c0:	80 91 63 00 	lds	r24, 0x0063
     7c4:	88 23       	and	r24, r24
     7c6:	69 f4       	brne	.+26     	; 0x7e2 <DEC_MIN+0x22>
		g_time[MINS]--;
	} else {
		if (g_time[HOURS] > MIN_mins_sec) {
     7c8:	80 91 64 00 	lds	r24, 0x0064
     7cc:	88 23       	and	r24, r24
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <DEC_MIN+0x20>
			g_time[HOURS]--;
     7d0:	80 91 64 00 	lds	r24, 0x0064
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	80 93 64 00 	sts	0x0064, r24
			g_time[MINS] = MAX_mins_sec;
     7da:	8b e3       	ldi	r24, 0x3B	; 59
     7dc:	80 93 63 00 	sts	0x0063, r24
     7e0:	08 95       	ret

	}
}
void DEC_MIN() {
	if (g_time[MINS] > MIN_mins_sec) {
		g_time[MINS]--;
     7e2:	80 91 63 00 	lds	r24, 0x0063
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	80 93 63 00 	sts	0x0063, r24
     7ec:	08 95       	ret

000007ee <INC_HOUR>:

	}
}

void INC_HOUR() {
	if (g_time[HOURS] < MAX_HOURS)
     7ee:	80 91 64 00 	lds	r24, 0x0064
     7f2:	83 36       	cpi	r24, 0x63	; 99
     7f4:	18 f0       	brcs	.+6      	; 0x7fc <INC_HOUR+0xe>
		g_time[HOURS]++;

	else
		g_time[HOURS] = MIN_HOURS;
     7f6:	10 92 64 00 	sts	0x0064, r1
     7fa:	08 95       	ret
	}
}

void INC_HOUR() {
	if (g_time[HOURS] < MAX_HOURS)
		g_time[HOURS]++;
     7fc:	80 91 64 00 	lds	r24, 0x0064
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	80 93 64 00 	sts	0x0064, r24
     806:	08 95       	ret

00000808 <DEC_HOUR>:
		g_time[HOURS] = MIN_HOURS;

}

void DEC_HOUR() {
	if (g_time[HOURS] > MIN_HOURS)
     808:	80 91 64 00 	lds	r24, 0x0064
     80c:	88 23       	and	r24, r24
     80e:	29 f0       	breq	.+10     	; 0x81a <DEC_HOUR+0x12>
		g_time[HOURS]--;
     810:	80 91 64 00 	lds	r24, 0x0064
     814:	81 50       	subi	r24, 0x01	; 1
     816:	80 93 64 00 	sts	0x0064, r24
     81a:	08 95       	ret

0000081c <Init_display>:

	}

}
void Init_display(){
display._7_segment_num=NUM_7_SEGMETS;
     81c:	26 e0       	ldi	r18, 0x06	; 6
     81e:	20 93 92 00 	sts	0x0092, r18
display.data_bitMask=_7_SEGMENT_DATA_BIT_MASK;
     822:	8f e0       	ldi	r24, 0x0F	; 15
     824:	80 93 9b 00 	sts	0x009B, r24
display.multi_bitMask=_7_SEGMENT_MULTI_BIT_MASK;
     828:	8f e3       	ldi	r24, 0x3F	; 63
     82a:	80 93 9c 00 	sts	0x009C, r24
display.data_ddr=&DDRC;
     82e:	84 e3       	ldi	r24, 0x34	; 52
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 94 00 	sts	0x0094, r25
     836:	80 93 93 00 	sts	0x0093, r24
display.multi_ddr=&DDRA;
     83a:	8a e3       	ldi	r24, 0x3A	; 58
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	90 93 96 00 	sts	0x0096, r25
     842:	80 93 95 00 	sts	0x0095, r24
display.multi_port=&PORTA;
     846:	8b e3       	ldi	r24, 0x3B	; 59
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	90 93 9a 00 	sts	0x009A, r25
     84e:	80 93 99 00 	sts	0x0099, r24
display.data_port=&PORTC;
     852:	85 e3       	ldi	r24, 0x35	; 53
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	90 93 98 00 	sts	0x0098, r25
     85a:	80 93 97 00 	sts	0x0097, r24
display.decimal_pin=DECIMAL_POINT;
     85e:	20 93 9e 00 	sts	0x009E, r18
display.decimal_port='D';
     862:	84 e4       	ldi	r24, 0x44	; 68
     864:	80 93 9d 00 	sts	0x009D, r24
Seven_Seg_INIT(&display);
     868:	82 e9       	ldi	r24, 0x92	; 146
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 24 03 	call	0x648	; 0x648 <Seven_Seg_INIT>
}
     870:	08 95       	ret

00000872 <Handle_End_Count_Down>:
		}
	}

}
void Handle_End_Count_Down() {
	if (g_end_countdown_flag) {
     872:	80 91 68 00 	lds	r24, 0x0068
     876:	88 23       	and	r24, r24
     878:	31 f4       	brne	.+12     	; 0x886 <Handle_End_Count_Down+0x14>
		stateMachine = PAUSE;
		GPIO_WritePin('D', BUZZER_PIN, HIGH);

	} else {
		GPIO_WritePin('D', BUZZER_PIN, LOW);
     87a:	84 e4       	ldi	r24, 0x44	; 68
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     884:	08 95       	ret
	}

}
void Handle_End_Count_Down() {
	if (g_end_countdown_flag) {
		stateMachine = PAUSE;
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	80 93 70 00 	sts	0x0070, r24
		GPIO_WritePin('D', BUZZER_PIN, HIGH);
     88c:	84 e4       	ldi	r24, 0x44	; 68
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     896:	08 95       	ret

00000898 <Handle_Button_Presses>:
	Pushbutton_Init(&hour_inc_button, 'B', HOURS_INC_B, INPUT_PULLUP);
	Pushbutton_Init(&hour_dec_button, 'B', HOURS_DEC_B, INPUT_PULLUP);
}

void Handle_Button_Presses() {
	if (g_interrupt_0_flag_reset) {
     898:	80 91 65 00 	lds	r24, 0x0065
     89c:	88 23       	and	r24, r24
     89e:	d9 f5       	brne	.+118    	; 0x916 <Handle_Button_Presses+0x7e>
		 StopWatch_Reset_time();
		g_interrupt_0_flag_reset = FALSE;

	} else if (g_interrupt_1_flag_pause) {
     8a0:	80 91 66 00 	lds	r24, 0x0066
     8a4:	88 23       	and	r24, r24
     8a6:	61 f0       	breq	.+24     	; 0x8c0 <Handle_Button_Presses+0x28>
		if (stateMachine != PAUSE)
     8a8:	80 91 70 00 	lds	r24, 0x0070
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <Handle_Button_Presses+0x1c>
			previousState = stateMachine;
     8b0:	80 93 71 00 	sts	0x0071, r24
		stateMachine = PAUSE;
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	80 93 70 00 	sts	0x0070, r24
		g_interrupt_1_flag_pause = FALSE;
     8ba:	10 92 66 00 	sts	0x0066, r1
     8be:	08 95       	ret

	} else if (g_interrupt_2_flag_resume) {
     8c0:	80 91 67 00 	lds	r24, 0x0067
     8c4:	88 23       	and	r24, r24
     8c6:	89 f5       	brne	.+98     	; 0x92a <Handle_Button_Presses+0x92>

		} else {
			stateMachine = previousState;
		}

	} else if (Pushbutton_Pressed(&mode_button)) {
     8c8:	8f e9       	ldi	r24, 0x9F	; 159
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     8d0:	88 23       	and	r24, r24
     8d2:	01 f1       	breq	.+64     	; 0x914 <Handle_Button_Presses+0x7c>
		if (stateMachine == COUNT_UP) {
     8d4:	80 91 70 00 	lds	r24, 0x0070
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <Handle_Button_Presses+0x46>
     8dc:	4d c0       	rjmp	.+154    	; 0x978 <Handle_Button_Presses+0xe0>
			stateMachine = COUNT_DOWN;
			set_CallBack(Timer1_Counter_DEC);
			GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
			GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
		} else if (stateMachine == COUNT_DOWN) {
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	89 f1       	breq	.+98     	; 0x944 <Handle_Button_Presses+0xac>
			stateMachine = COUNT_UP;
			set_CallBack(Timer1_Counter_INC);
			GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
			GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
		} else if (stateMachine == PAUSE) {
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	b9 f4       	brne	.+46     	; 0x914 <Handle_Button_Presses+0x7c>
			if (previousState == COUNT_UP) {
     8e6:	80 91 71 00 	lds	r24, 0x0071
     8ea:	88 23       	and	r24, r24
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <Handle_Button_Presses+0x58>
     8ee:	56 c0       	rjmp	.+172    	; 0x99c <Handle_Button_Presses+0x104>
				previousState = COUNT_DOWN;
				set_CallBack(Timer1_Counter_DEC);
				GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
				GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);

			} else if (previousState == COUNT_DOWN) {
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	81 f4       	brne	.+32     	; 0x914 <Handle_Button_Presses+0x7c>
				previousState = COUNT_UP;
     8f4:	10 92 71 00 	sts	0x0071, r1
				set_CallBack(Timer1_Counter_INC);
     8f8:	8d e6       	ldi	r24, 0x6D	; 109
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
				GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
     900:	84 e4       	ldi	r24, 0x44	; 68
     902:	64 e0       	ldi	r22, 0x04	; 4
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
				GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
     90a:	84 e4       	ldi	r24, 0x44	; 68
     90c:	65 e0       	ldi	r22, 0x05	; 5
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     914:	08 95       	ret

}

// resets time in time_Calculator(uint8_t*) function
void  StopWatch_Reset_time() {
	TCNT0 = MIN_HOURS;
     916:	12 be       	out	0x32, r1	; 50
	g_time[HOURS] = MIN_HOURS;
     918:	10 92 64 00 	sts	0x0064, r1
	g_time[MINS] = MIN_mins_sec;
     91c:	10 92 63 00 	sts	0x0063, r1
	g_time[SECS] = MIN_mins_sec;
     920:	10 92 62 00 	sts	0x0062, r1
}

void Handle_Button_Presses() {
	if (g_interrupt_0_flag_reset) {
		 StopWatch_Reset_time();
		g_interrupt_0_flag_reset = FALSE;
     924:	10 92 65 00 	sts	0x0065, r1
     928:	08 95       	ret
		stateMachine = PAUSE;
		g_interrupt_1_flag_pause = FALSE;

	} else if (g_interrupt_2_flag_resume) {

		Timer1_ON();
     92a:	0e 94 de 09 	call	0x13bc	; 0x13bc <Timer1_ON>
		g_interrupt_2_flag_resume = FALSE;
     92e:	10 92 67 00 	sts	0x0067, r1
		if (g_end_countdown_flag) {
     932:	80 91 68 00 	lds	r24, 0x0068
     936:	88 23       	and	r24, r24
     938:	b1 f4       	brne	.+44     	; 0x966 <Handle_Button_Presses+0xce>
			g_end_countdown_flag = FALSE;
			stateMachine = COUNT_UP;
			set_CallBack(Timer1_Counter_INC);

		} else {
			stateMachine = previousState;
     93a:	80 91 71 00 	lds	r24, 0x0071
     93e:	80 93 70 00 	sts	0x0070, r24
     942:	08 95       	ret
			stateMachine = COUNT_DOWN;
			set_CallBack(Timer1_Counter_DEC);
			GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
			GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
		} else if (stateMachine == COUNT_DOWN) {
			stateMachine = COUNT_UP;
     944:	10 92 70 00 	sts	0x0070, r1
			set_CallBack(Timer1_Counter_INC);
     948:	8d e6       	ldi	r24, 0x6D	; 109
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
			GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
     950:	84 e4       	ldi	r24, 0x44	; 68
     952:	64 e0       	ldi	r22, 0x04	; 4
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
			GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
     95a:	84 e4       	ldi	r24, 0x44	; 68
     95c:	65 e0       	ldi	r22, 0x05	; 5
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     964:	08 95       	ret

		Timer1_ON();
		g_interrupt_2_flag_resume = FALSE;
		if (g_end_countdown_flag) {

			g_end_countdown_flag = FALSE;
     966:	10 92 68 00 	sts	0x0068, r1
			stateMachine = COUNT_UP;
     96a:	10 92 70 00 	sts	0x0070, r1
			set_CallBack(Timer1_Counter_INC);
     96e:	8d e6       	ldi	r24, 0x6D	; 109
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
     976:	08 95       	ret
			stateMachine = previousState;
		}

	} else if (Pushbutton_Pressed(&mode_button)) {
		if (stateMachine == COUNT_UP) {
			stateMachine = COUNT_DOWN;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 70 00 	sts	0x0070, r24
			GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
			GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
		} else if (stateMachine == PAUSE) {
			if (previousState == COUNT_UP) {
				previousState = COUNT_DOWN;
				set_CallBack(Timer1_Counter_DEC);
     97e:	8d e8       	ldi	r24, 0x8D	; 141
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
				GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
     986:	84 e4       	ldi	r24, 0x44	; 68
     988:	64 e0       	ldi	r22, 0x04	; 4
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
				GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
     990:	84 e4       	ldi	r24, 0x44	; 68
     992:	65 e0       	ldi	r22, 0x05	; 5
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
     99a:	08 95       	ret
			set_CallBack(Timer1_Counter_INC);
			GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
			GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
		} else if (stateMachine == PAUSE) {
			if (previousState == COUNT_UP) {
				previousState = COUNT_DOWN;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 71 00 	sts	0x0071, r24
     9a2:	ed cf       	rjmp	.-38     	; 0x97e <Handle_Button_Presses+0xe6>

000009a4 <Init_Stopwatch_Buttons>:
	INT_1_Init(FALLING_EDGE, &g_interrupt_1_flag_pause);
	INT_2_Init(FALLING_EDGE, &g_interrupt_2_flag_resume);

}
void Init_Stopwatch_Buttons() {
	Pushbutton_Init(&mode_button, 'B', MODE_B, INPUT_PULLUP);
     9a4:	8f e9       	ldi	r24, 0x9F	; 159
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	62 e4       	ldi	r22, 0x42	; 66
     9aa:	47 e0       	ldi	r20, 0x07	; 7
     9ac:	22 e0       	ldi	r18, 0x02	; 2
     9ae:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&sec_inc_button, 'B', SECS_INC_B, INPUT_PULLUP);
     9b2:	87 ea       	ldi	r24, 0xA7	; 167
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	62 e4       	ldi	r22, 0x42	; 66
     9b8:	46 e0       	ldi	r20, 0x06	; 6
     9ba:	22 e0       	ldi	r18, 0x02	; 2
     9bc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&sec_dec_button, 'B', SECS_DEC_B, INPUT_PULLUP);
     9c0:	82 e8       	ldi	r24, 0x82	; 130
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	62 e4       	ldi	r22, 0x42	; 66
     9c6:	45 e0       	ldi	r20, 0x05	; 5
     9c8:	22 e0       	ldi	r18, 0x02	; 2
     9ca:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&min_inc_button, 'B', MINS_INC_B, INPUT_PULLUP);
     9ce:	8e e8       	ldi	r24, 0x8E	; 142
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	62 e4       	ldi	r22, 0x42	; 66
     9d4:	44 e0       	ldi	r20, 0x04	; 4
     9d6:	22 e0       	ldi	r18, 0x02	; 2
     9d8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&min_dec_button, 'B', MINS_DEC_B, INPUT_PULLUP);
     9dc:	83 ea       	ldi	r24, 0xA3	; 163
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	62 e4       	ldi	r22, 0x42	; 66
     9e2:	43 e0       	ldi	r20, 0x03	; 3
     9e4:	22 e0       	ldi	r18, 0x02	; 2
     9e6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&hour_inc_button, 'B', HOURS_INC_B, INPUT_PULLUP);
     9ea:	86 e8       	ldi	r24, 0x86	; 134
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	62 e4       	ldi	r22, 0x42	; 66
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	22 e0       	ldi	r18, 0x02	; 2
     9f4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&hour_dec_button, 'B', HOURS_DEC_B, INPUT_PULLUP);
     9f8:	8a e8       	ldi	r24, 0x8A	; 138
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	62 e4       	ldi	r22, 0x42	; 66
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	22 e0       	ldi	r18, 0x02	; 2
     a02:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
}
     a06:	08 95       	ret

00000a08 <Interrupt_INIT>:


}
void Interrupt_INIT() {

	INT_0_Init(FALLING_EDGE, &g_interrupt_0_flag_reset);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	65 e6       	ldi	r22, 0x65	; 101
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	0e 94 3e 00 	call	0x7c	; 0x7c <INT_0_Init>
	INT_1_Init(FALLING_EDGE, &g_interrupt_1_flag_pause);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	66 e6       	ldi	r22, 0x66	; 102
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	0e 94 6a 00 	call	0xd4	; 0xd4 <INT_1_Init>
	INT_2_Init(FALLING_EDGE, &g_interrupt_2_flag_resume);
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	67 e6       	ldi	r22, 0x67	; 103
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	0e 94 96 00 	call	0x12c	; 0x12c <INT_2_Init>

}
     a26:	08 95       	ret

00000a28 <GPIO_Init>:
	Disp_7_Segment(g_disp_data);
}
void GPIO_Init() {


	GPIO_SetPinDirection('D', BUZZER_PIN, OUTPUT);
     a28:	84 e4       	ldi	r24, 0x44	; 68
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>

	GPIO_SetPinDirection('A', ON_OFF_LED, OUTPUT);
     a32:	81 e4       	ldi	r24, 0x41	; 65
     a34:	66 e0       	ldi	r22, 0x06	; 6
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection('D', RESET_D, INPUT_PULLUP);
     a3c:	84 e4       	ldi	r24, 0x44	; 68
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	42 e0       	ldi	r20, 0x02	; 2
     a42:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection('B', RESUME_B, INPUT_PULLUP);
     a46:	82 e4       	ldi	r24, 0x42	; 66
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	42 e0       	ldi	r20, 0x02	; 2
     a4c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection('D', PAUSE_D, INPUT_PULLUP);
     a50:	84 e4       	ldi	r24, 0x44	; 68
     a52:	63 e0       	ldi	r22, 0x03	; 3
     a54:	42 e0       	ldi	r20, 0x02	; 2
     a56:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>

//PORTB |= (1 << PB7);


}
     a5a:	08 95       	ret

00000a5c <Display_time>:
	g_time[HOURS] = MIN_HOURS;
	g_time[MINS] = MIN_mins_sec;
	g_time[SECS] = MIN_mins_sec;
}
void Display_time() {
	g_disp_data[0] = (uint8_t) (g_time[HOURS] / 10);
     a5c:	a4 e6       	ldi	r26, 0x64	; 100
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	80 91 64 00 	lds	r24, 0x0064
     a64:	6a e0       	ldi	r22, 0x0A	; 10
     a66:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     a6a:	80 93 6a 00 	sts	0x006A, r24
	g_disp_data[1] = g_time[HOURS] % 10;
     a6e:	80 91 64 00 	lds	r24, 0x0064
     a72:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     a76:	90 93 6b 00 	sts	0x006B, r25
	g_disp_data[2] = (uint8_t) (g_time[MINS] / 10);
     a7a:	fd 01       	movw	r30, r26
     a7c:	82 91       	ld	r24, -Z
     a7e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     a82:	80 93 6c 00 	sts	0x006C, r24
	g_disp_data[3] = g_time[MINS] % 10;
     a86:	80 81       	ld	r24, Z
     a88:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     a8c:	90 93 6d 00 	sts	0x006D, r25
	g_disp_data[4] = (uint8_t) (g_time[SECS] / 10);
     a90:	12 97       	sbiw	r26, 0x02	; 2
     a92:	8c 91       	ld	r24, X
     a94:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     a98:	80 93 6e 00 	sts	0x006E, r24
	g_disp_data[5] = g_time[SECS] % 10;
     a9c:	8c 91       	ld	r24, X
     a9e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     aa2:	90 93 6f 00 	sts	0x006F, r25

	Disp_7_Segment(g_disp_data);
     aa6:	8a e6       	ldi	r24, 0x6A	; 106
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 a2 02 	call	0x544	; 0x544 <Disp_7_Segment>
}
     aae:	08 95       	ret

00000ab0 <INC_SEC>:

	}

}
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
     ab0:	80 91 62 00 	lds	r24, 0x0062
     ab4:	8b 33       	cpi	r24, 0x3B	; 59
     ab6:	b0 f0       	brcs	.+44     	; 0xae4 <INC_SEC+0x34>
		g_time[SECS]++;
	} else {
		if (g_time[MINS] < MAX_mins_sec) {
     ab8:	80 91 63 00 	lds	r24, 0x0063
     abc:	8b 33       	cpi	r24, 0x3B	; 59
     abe:	50 f0       	brcs	.+20     	; 0xad4 <INC_SEC+0x24>
			g_time[MINS]++;
			g_time[SECS] = MIN_mins_sec;
		} else {
			g_time[HOURS]++;
     ac0:	80 91 64 00 	lds	r24, 0x0064
     ac4:	8f 5f       	subi	r24, 0xFF	; 255
     ac6:	80 93 64 00 	sts	0x0064, r24
			g_time[MINS] = MIN_mins_sec;
     aca:	10 92 63 00 	sts	0x0063, r1
			g_time[SECS] = MIN_mins_sec;
     ace:	10 92 62 00 	sts	0x0062, r1
     ad2:	08 95       	ret
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
		g_time[SECS]++;
	} else {
		if (g_time[MINS] < MAX_mins_sec) {
			g_time[MINS]++;
     ad4:	80 91 63 00 	lds	r24, 0x0063
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 63 00 	sts	0x0063, r24
			g_time[SECS] = MIN_mins_sec;
     ade:	10 92 62 00 	sts	0x0062, r1
     ae2:	08 95       	ret
	}

}
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
		g_time[SECS]++;
     ae4:	80 91 62 00 	lds	r24, 0x0062
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	80 93 62 00 	sts	0x0062, r24
     aee:	08 95       	ret

00000af0 <DEC_SEC>:
		}
	}

}
void Timer1_Counter_DEC() {
	if (g_time[SECS] > MIN_mins_sec) {
     af0:	80 91 62 00 	lds	r24, 0x0062
     af4:	88 23       	and	r24, r24
     af6:	a9 f0       	breq	.+42     	; 0xb22 <DEC_SEC+0x32>
		g_time[SECS]--;
     af8:	80 91 62 00 	lds	r24, 0x0062
     afc:	81 50       	subi	r24, 0x01	; 1
     afe:	80 93 62 00 	sts	0x0062, r24
				g_end_countdown_flag = TRUE;

			}
		}
	}
	if (g_time[SECS] == MIN_mins_sec && g_time[MINS] == MIN_mins_sec
     b02:	80 91 62 00 	lds	r24, 0x0062
     b06:	88 23       	and	r24, r24
     b08:	59 f4       	brne	.+22     	; 0xb20 <DEC_SEC+0x30>
     b0a:	80 91 63 00 	lds	r24, 0x0063
     b0e:	88 23       	and	r24, r24
     b10:	39 f4       	brne	.+14     	; 0xb20 <DEC_SEC+0x30>
     b12:	80 91 64 00 	lds	r24, 0x0064
     b16:	88 23       	and	r24, r24
     b18:	19 f4       	brne	.+6      	; 0xb20 <DEC_SEC+0x30>
			&& g_time[HOURS] == MIN_HOURS) {
		g_end_countdown_flag = TRUE;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	80 93 68 00 	sts	0x0068, r24
     b20:	08 95       	ret
}
void Timer1_Counter_DEC() {
	if (g_time[SECS] > MIN_mins_sec) {
		g_time[SECS]--;
	} else {
		if (g_time[MINS] > MIN_mins_sec) {
     b22:	80 91 63 00 	lds	r24, 0x0063
     b26:	88 23       	and	r24, r24
     b28:	49 f0       	breq	.+18     	; 0xb3c <DEC_SEC+0x4c>
			g_time[MINS]--;
     b2a:	80 91 63 00 	lds	r24, 0x0063
     b2e:	81 50       	subi	r24, 0x01	; 1
     b30:	80 93 63 00 	sts	0x0063, r24
			g_time[SECS] = MAX_mins_sec;
     b34:	8b e3       	ldi	r24, 0x3B	; 59
     b36:	80 93 62 00 	sts	0x0062, r24
     b3a:	e3 cf       	rjmp	.-58     	; 0xb02 <DEC_SEC+0x12>
		} else {
			if (g_time[HOURS] > MIN_HOURS) {
     b3c:	80 91 64 00 	lds	r24, 0x0064
     b40:	88 23       	and	r24, r24
     b42:	59 f0       	breq	.+22     	; 0xb5a <DEC_SEC+0x6a>
				g_time[HOURS]--;
     b44:	80 91 64 00 	lds	r24, 0x0064
     b48:	81 50       	subi	r24, 0x01	; 1
     b4a:	80 93 64 00 	sts	0x0064, r24
				g_time[SECS] = MAX_mins_sec;
     b4e:	8b e3       	ldi	r24, 0x3B	; 59
     b50:	80 93 62 00 	sts	0x0062, r24
				g_time[MINS] = MAX_mins_sec;
     b54:	80 93 63 00 	sts	0x0063, r24
     b58:	d4 cf       	rjmp	.-88     	; 0xb02 <DEC_SEC+0x12>
			} else {
				g_end_countdown_flag = TRUE;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 68 00 	sts	0x0068, r24
     b60:	d0 cf       	rjmp	.-96     	; 0xb02 <DEC_SEC+0x12>

00000b62 <StopWatch_Adjust_Time>:
	if (g_time[HOURS] > MIN_HOURS)
		g_time[HOURS]--;
}

void StopWatch_Adjust_Time() {
	if (Pushbutton_Pressed(&sec_inc_button)) {
     b62:	87 ea       	ldi	r24, 0xA7	; 167
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     b6a:	88 23       	and	r24, r24
     b6c:	09 f0       	breq	.+2      	; 0xb70 <StopWatch_Adjust_Time+0xe>
     b6e:	48 c0       	rjmp	.+144    	; 0xc00 <StopWatch_Adjust_Time+0x9e>
		INC_SEC();
	} else if (Pushbutton_Pressed(&sec_dec_button)) {
     b70:	82 e8       	ldi	r24, 0x82	; 130
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     b78:	88 23       	and	r24, r24
     b7a:	01 f5       	brne	.+64     	; 0xbbc <StopWatch_Adjust_Time+0x5a>
		DEC_SEC();
	} else if (Pushbutton_Pressed(&min_dec_button)) {
     b7c:	83 ea       	ldi	r24, 0xA3	; 163
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     b84:	88 23       	and	r24, r24
     b86:	09 f0       	breq	.+2      	; 0xb8a <StopWatch_Adjust_Time+0x28>
     b88:	53 c0       	rjmp	.+166    	; 0xc30 <StopWatch_Adjust_Time+0xce>
		DEC_MIN();
	}

	else if (Pushbutton_Pressed(&min_inc_button)) {
     b8a:	8e e8       	ldi	r24, 0x8E	; 142
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     b92:	88 23       	and	r24, r24
     b94:	09 f0       	breq	.+2      	; 0xb98 <StopWatch_Adjust_Time+0x36>
     b96:	6f c0       	rjmp	.+222    	; 0xc76 <StopWatch_Adjust_Time+0x114>

		INC_MIN();

	}

	else if (Pushbutton_Pressed(&hour_inc_button)) {
     b98:	86 e8       	ldi	r24, 0x86	; 134
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <StopWatch_Adjust_Time+0x44>
     ba4:	87 c0       	rjmp	.+270    	; 0xcb4 <StopWatch_Adjust_Time+0x152>

	}
}

void INC_HOUR() {
	if (g_time[HOURS] < MAX_HOURS)
     ba6:	80 91 64 00 	lds	r24, 0x0064
     baa:	83 36       	cpi	r24, 0x63	; 99
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <StopWatch_Adjust_Time+0x4e>
     bae:	7f c0       	rjmp	.+254    	; 0xcae <StopWatch_Adjust_Time+0x14c>
		g_time[HOURS]++;
     bb0:	80 91 64 00 	lds	r24, 0x0064
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 64 00 	sts	0x0064, r24
     bba:	08 95       	ret
		}
	}

}
void Timer1_Counter_DEC() {
	if (g_time[SECS] > MIN_mins_sec) {
     bbc:	80 91 62 00 	lds	r24, 0x0062
     bc0:	88 23       	and	r24, r24
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <StopWatch_Adjust_Time+0x64>
     bc4:	46 c0       	rjmp	.+140    	; 0xc52 <StopWatch_Adjust_Time+0xf0>
		g_time[SECS]--;
	} else {
		if (g_time[MINS] > MIN_mins_sec) {
     bc6:	80 91 63 00 	lds	r24, 0x0063
     bca:	88 23       	and	r24, r24
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <StopWatch_Adjust_Time+0x6e>
     bce:	56 c0       	rjmp	.+172    	; 0xc7c <StopWatch_Adjust_Time+0x11a>
			g_time[MINS]--;
     bd0:	80 91 63 00 	lds	r24, 0x0063
     bd4:	81 50       	subi	r24, 0x01	; 1
     bd6:	80 93 63 00 	sts	0x0063, r24
			g_time[SECS] = MAX_mins_sec;
     bda:	8b e3       	ldi	r24, 0x3B	; 59
     bdc:	80 93 62 00 	sts	0x0062, r24
				g_end_countdown_flag = TRUE;

			}
		}
	}
	if (g_time[SECS] == MIN_mins_sec && g_time[MINS] == MIN_mins_sec
     be0:	80 91 62 00 	lds	r24, 0x0062
     be4:	88 23       	and	r24, r24
     be6:	f1 f5       	brne	.+124    	; 0xc64 <StopWatch_Adjust_Time+0x102>
     be8:	80 91 63 00 	lds	r24, 0x0063
     bec:	88 23       	and	r24, r24
     bee:	d1 f5       	brne	.+116    	; 0xc64 <StopWatch_Adjust_Time+0x102>
     bf0:	80 91 64 00 	lds	r24, 0x0064
     bf4:	88 23       	and	r24, r24
     bf6:	b1 f5       	brne	.+108    	; 0xc64 <StopWatch_Adjust_Time+0x102>
			&& g_time[HOURS] == MIN_HOURS) {
		g_end_countdown_flag = TRUE;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 68 00 	sts	0x0068, r24
     bfe:	08 95       	ret

	}

}
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
     c00:	80 91 62 00 	lds	r24, 0x0062
     c04:	8b 33       	cpi	r24, 0x3B	; 59
     c06:	70 f0       	brcs	.+28     	; 0xc24 <StopWatch_Adjust_Time+0xc2>
		g_time[SECS]++;
	} else {
		if (g_time[MINS] < MAX_mins_sec) {
     c08:	80 91 63 00 	lds	r24, 0x0063
     c0c:	8b 33       	cpi	r24, 0x3B	; 59
     c0e:	58 f1       	brcs	.+86     	; 0xc66 <StopWatch_Adjust_Time+0x104>
			g_time[MINS]++;
			g_time[SECS] = MIN_mins_sec;
		} else {
			g_time[HOURS]++;
     c10:	80 91 64 00 	lds	r24, 0x0064
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 93 64 00 	sts	0x0064, r24
			g_time[MINS] = MIN_mins_sec;
     c1a:	10 92 63 00 	sts	0x0063, r1
			g_time[SECS] = MIN_mins_sec;
     c1e:	10 92 62 00 	sts	0x0062, r1
     c22:	08 95       	ret
	}

}
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
		g_time[SECS]++;
     c24:	80 91 62 00 	lds	r24, 0x0062
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 62 00 	sts	0x0062, r24
     c2e:	08 95       	ret
		g_time[MINS] = MIN_mins_sec;

	}
}
void DEC_MIN() {
	if (g_time[MINS] > MIN_mins_sec) {
     c30:	80 91 63 00 	lds	r24, 0x0063
     c34:	88 23       	and	r24, r24
     c36:	89 f5       	brne	.+98     	; 0xc9a <StopWatch_Adjust_Time+0x138>
		g_time[MINS]--;
	} else {
		if (g_time[HOURS] > MIN_mins_sec) {
     c38:	80 91 64 00 	lds	r24, 0x0064
     c3c:	88 23       	and	r24, r24
     c3e:	91 f0       	breq	.+36     	; 0xc64 <StopWatch_Adjust_Time+0x102>
			g_time[HOURS]--;
     c40:	80 91 64 00 	lds	r24, 0x0064
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	80 93 64 00 	sts	0x0064, r24
			g_time[MINS] = MAX_mins_sec;
     c4a:	8b e3       	ldi	r24, 0x3B	; 59
     c4c:	80 93 63 00 	sts	0x0063, r24
     c50:	08 95       	ret
	}

}
void Timer1_Counter_DEC() {
	if (g_time[SECS] > MIN_mins_sec) {
		g_time[SECS]--;
     c52:	80 91 62 00 	lds	r24, 0x0062
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	80 93 62 00 	sts	0x0062, r24
				g_end_countdown_flag = TRUE;

			}
		}
	}
	if (g_time[SECS] == MIN_mins_sec && g_time[MINS] == MIN_mins_sec
     c5c:	80 91 62 00 	lds	r24, 0x0062
     c60:	88 23       	and	r24, r24
     c62:	11 f2       	breq	.-124    	; 0xbe8 <StopWatch_Adjust_Time+0x86>
     c64:	08 95       	ret
void Timer1_Counter_INC() {
	if (g_time[SECS] < MAX_mins_sec) {
		g_time[SECS]++;
	} else {
		if (g_time[MINS] < MAX_mins_sec) {
			g_time[MINS]++;
     c66:	80 91 63 00 	lds	r24, 0x0063
     c6a:	8f 5f       	subi	r24, 0xFF	; 255
     c6c:	80 93 63 00 	sts	0x0063, r24
			g_time[SECS] = MIN_mins_sec;
     c70:	10 92 62 00 	sts	0x0062, r1
     c74:	08 95       	ret
		DEC_MIN();
	}

	else if (Pushbutton_Pressed(&min_inc_button)) {

		INC_MIN();
     c76:	0e 94 ce 03 	call	0x79c	; 0x79c <INC_MIN>
     c7a:	08 95       	ret
	} else {
		if (g_time[MINS] > MIN_mins_sec) {
			g_time[MINS]--;
			g_time[SECS] = MAX_mins_sec;
		} else {
			if (g_time[HOURS] > MIN_HOURS) {
     c7c:	80 91 64 00 	lds	r24, 0x0064
     c80:	88 23       	and	r24, r24
     c82:	89 f0       	breq	.+34     	; 0xca6 <StopWatch_Adjust_Time+0x144>
				g_time[HOURS]--;
     c84:	80 91 64 00 	lds	r24, 0x0064
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	80 93 64 00 	sts	0x0064, r24
				g_time[SECS] = MAX_mins_sec;
     c8e:	8b e3       	ldi	r24, 0x3B	; 59
     c90:	80 93 62 00 	sts	0x0062, r24
				g_time[MINS] = MAX_mins_sec;
     c94:	80 93 63 00 	sts	0x0063, r24
     c98:	a3 cf       	rjmp	.-186    	; 0xbe0 <StopWatch_Adjust_Time+0x7e>

	}
}
void DEC_MIN() {
	if (g_time[MINS] > MIN_mins_sec) {
		g_time[MINS]--;
     c9a:	80 91 63 00 	lds	r24, 0x0063
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	80 93 63 00 	sts	0x0063, r24
     ca4:	08 95       	ret
			if (g_time[HOURS] > MIN_HOURS) {
				g_time[HOURS]--;
				g_time[SECS] = MAX_mins_sec;
				g_time[MINS] = MAX_mins_sec;
			} else {
				g_end_countdown_flag = TRUE;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 68 00 	sts	0x0068, r24
     cac:	99 cf       	rjmp	.-206    	; 0xbe0 <StopWatch_Adjust_Time+0x7e>
void INC_HOUR() {
	if (g_time[HOURS] < MAX_HOURS)
		g_time[HOURS]++;

	else
		g_time[HOURS] = MIN_HOURS;
     cae:	10 92 64 00 	sts	0x0064, r1
     cb2:	08 95       	ret

	else if (Pushbutton_Pressed(&hour_inc_button)) {

		INC_HOUR();

	} else if (Pushbutton_Pressed(&hour_dec_button)) {
     cb4:	8a e8       	ldi	r24, 0x8A	; 138
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 43 03 	call	0x686	; 0x686 <Pushbutton_Pressed>
     cbc:	88 23       	and	r24, r24
     cbe:	91 f2       	breq	.-92     	; 0xc64 <StopWatch_Adjust_Time+0x102>
		g_time[HOURS] = MIN_HOURS;

}

void DEC_HOUR() {
	if (g_time[HOURS] > MIN_HOURS)
     cc0:	80 91 64 00 	lds	r24, 0x0064
     cc4:	88 23       	and	r24, r24
     cc6:	71 f2       	breq	.-100    	; 0xc64 <StopWatch_Adjust_Time+0x102>
		g_time[HOURS]--;
     cc8:	80 91 64 00 	lds	r24, 0x0064
     ccc:	81 50       	subi	r24, 0x01	; 1
     cce:	80 93 64 00 	sts	0x0064, r24
     cd2:	08 95       	ret

00000cd4 <main>:
struct pushbutton min_dec_button;
struct pushbutton hour_inc_button;
struct pushbutton hour_dec_button;
struct multi_7_segment display ;

int main() {
     cd4:	1f 93       	push	r17

	Timer1_Init_CTC_Mode(COMP_VALUE_ONE_SEC_TIMER1);
     cd6:	89 e0       	ldi	r24, 0x09	; 9
     cd8:	9d e3       	ldi	r25, 0x3D	; 61
     cda:	0e 94 c3 09 	call	0x1386	; 0x1386 <Timer1_Init_CTC_Mode>
	Timer0_Init_CTC_Mode(COMP_VALUE_ONE_mSEC_TIMER0);
     cde:	8a ef       	ldi	r24, 0xFA	; 250
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 98 08 	call	0x1130	; 0x1130 <Timer0_Init_CTC_Mode>
	Disp_7_Segment(g_disp_data);
}
void GPIO_Init() {


	GPIO_SetPinDirection('D', BUZZER_PIN, OUTPUT);
     ce6:	84 e4       	ldi	r24, 0x44	; 68
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>

	GPIO_SetPinDirection('A', ON_OFF_LED, OUTPUT);
     cf0:	81 e4       	ldi	r24, 0x41	; 65
     cf2:	66 e0       	ldi	r22, 0x06	; 6
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection('D', RESET_D, INPUT_PULLUP);
     cfa:	84 e4       	ldi	r24, 0x44	; 68
     cfc:	62 e0       	ldi	r22, 0x02	; 2
     cfe:	42 e0       	ldi	r20, 0x02	; 2
     d00:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection('B', RESUME_B, INPUT_PULLUP);
     d04:	82 e4       	ldi	r24, 0x42	; 66
     d06:	62 e0       	ldi	r22, 0x02	; 2
     d08:	42 e0       	ldi	r20, 0x02	; 2
     d0a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection('D', PAUSE_D, INPUT_PULLUP);
     d0e:	84 e4       	ldi	r24, 0x44	; 68
     d10:	63 e0       	ldi	r22, 0x03	; 3
     d12:	42 e0       	ldi	r20, 0x02	; 2
     d14:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_SetPinDirection>

	}

}
void Init_display(){
display._7_segment_num=NUM_7_SEGMETS;
     d18:	26 e0       	ldi	r18, 0x06	; 6
     d1a:	20 93 92 00 	sts	0x0092, r18
display.data_bitMask=_7_SEGMENT_DATA_BIT_MASK;
     d1e:	8f e0       	ldi	r24, 0x0F	; 15
     d20:	80 93 9b 00 	sts	0x009B, r24
display.multi_bitMask=_7_SEGMENT_MULTI_BIT_MASK;
     d24:	8f e3       	ldi	r24, 0x3F	; 63
     d26:	80 93 9c 00 	sts	0x009C, r24
display.data_ddr=&DDRC;
     d2a:	84 e3       	ldi	r24, 0x34	; 52
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	90 93 94 00 	sts	0x0094, r25
     d32:	80 93 93 00 	sts	0x0093, r24
display.multi_ddr=&DDRA;
     d36:	8a e3       	ldi	r24, 0x3A	; 58
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	90 93 96 00 	sts	0x0096, r25
     d3e:	80 93 95 00 	sts	0x0095, r24
display.multi_port=&PORTA;
     d42:	8b e3       	ldi	r24, 0x3B	; 59
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	90 93 9a 00 	sts	0x009A, r25
     d4a:	80 93 99 00 	sts	0x0099, r24
display.data_port=&PORTC;
     d4e:	85 e3       	ldi	r24, 0x35	; 53
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 98 00 	sts	0x0098, r25
     d56:	80 93 97 00 	sts	0x0097, r24
display.decimal_pin=DECIMAL_POINT;
     d5a:	20 93 9e 00 	sts	0x009E, r18
display.decimal_port='D';
     d5e:	84 e4       	ldi	r24, 0x44	; 68
     d60:	80 93 9d 00 	sts	0x009D, r24
Seven_Seg_INIT(&display);
     d64:	82 e9       	ldi	r24, 0x92	; 146
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 24 03 	call	0x648	; 0x648 <Seven_Seg_INIT>


}
void Interrupt_INIT() {

	INT_0_Init(FALLING_EDGE, &g_interrupt_0_flag_reset);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	65 e6       	ldi	r22, 0x65	; 101
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	0e 94 3e 00 	call	0x7c	; 0x7c <INT_0_Init>
	INT_1_Init(FALLING_EDGE, &g_interrupt_1_flag_pause);
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	66 e6       	ldi	r22, 0x66	; 102
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 6a 00 	call	0xd4	; 0xd4 <INT_1_Init>
	INT_2_Init(FALLING_EDGE, &g_interrupt_2_flag_resume);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	67 e6       	ldi	r22, 0x67	; 103
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	0e 94 96 00 	call	0x12c	; 0x12c <INT_2_Init>

}
void Init_Stopwatch_Buttons() {
	Pushbutton_Init(&mode_button, 'B', MODE_B, INPUT_PULLUP);
     d8a:	8f e9       	ldi	r24, 0x9F	; 159
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	62 e4       	ldi	r22, 0x42	; 66
     d90:	47 e0       	ldi	r20, 0x07	; 7
     d92:	22 e0       	ldi	r18, 0x02	; 2
     d94:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&sec_inc_button, 'B', SECS_INC_B, INPUT_PULLUP);
     d98:	87 ea       	ldi	r24, 0xA7	; 167
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	62 e4       	ldi	r22, 0x42	; 66
     d9e:	46 e0       	ldi	r20, 0x06	; 6
     da0:	22 e0       	ldi	r18, 0x02	; 2
     da2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&sec_dec_button, 'B', SECS_DEC_B, INPUT_PULLUP);
     da6:	82 e8       	ldi	r24, 0x82	; 130
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	62 e4       	ldi	r22, 0x42	; 66
     dac:	45 e0       	ldi	r20, 0x05	; 5
     dae:	22 e0       	ldi	r18, 0x02	; 2
     db0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&min_inc_button, 'B', MINS_INC_B, INPUT_PULLUP);
     db4:	8e e8       	ldi	r24, 0x8E	; 142
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	62 e4       	ldi	r22, 0x42	; 66
     dba:	44 e0       	ldi	r20, 0x04	; 4
     dbc:	22 e0       	ldi	r18, 0x02	; 2
     dbe:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&min_dec_button, 'B', MINS_DEC_B, INPUT_PULLUP);
     dc2:	83 ea       	ldi	r24, 0xA3	; 163
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	62 e4       	ldi	r22, 0x42	; 66
     dc8:	43 e0       	ldi	r20, 0x03	; 3
     dca:	22 e0       	ldi	r18, 0x02	; 2
     dcc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&hour_inc_button, 'B', HOURS_INC_B, INPUT_PULLUP);
     dd0:	86 e8       	ldi	r24, 0x86	; 134
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	62 e4       	ldi	r22, 0x42	; 66
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	22 e0       	ldi	r18, 0x02	; 2
     dda:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>
	Pushbutton_Init(&hour_dec_button, 'B', HOURS_DEC_B, INPUT_PULLUP);
     dde:	8a e8       	ldi	r24, 0x8A	; 138
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	62 e4       	ldi	r22, 0x42	; 66
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	22 e0       	ldi	r18, 0x02	; 2
     de8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Pushbutton_Init>

}

// resets time in time_Calculator(uint8_t*) function
void  StopWatch_Reset_time() {
	TCNT0 = MIN_HOURS;
     dec:	12 be       	out	0x32, r1	; 50
	g_time[HOURS] = MIN_HOURS;
     dee:	10 92 64 00 	sts	0x0064, r1
	g_time[MINS] = MIN_mins_sec;
     df2:	10 92 63 00 	sts	0x0063, r1
	g_time[SECS] = MIN_mins_sec;
     df6:	10 92 62 00 	sts	0x0062, r1
	}

}
void Handle_End_Count_Down() {
	if (g_end_countdown_flag) {
		stateMachine = PAUSE;
     dfa:	12 e0       	ldi	r17, 0x02	; 2


	for (;;) {


		Handle_Button_Presses();
     dfc:	0e 94 4c 04 	call	0x898	; 0x898 <Handle_Button_Presses>
		}
	}

}
void Handle_End_Count_Down() {
	if (g_end_countdown_flag) {
     e00:	80 91 68 00 	lds	r24, 0x0068
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <main+0x136>
     e08:	50 c0       	rjmp	.+160    	; 0xeaa <main+0x1d6>
		stateMachine = PAUSE;
		GPIO_WritePin('D', BUZZER_PIN, HIGH);

	} else {
		GPIO_WritePin('D', BUZZER_PIN, LOW);
     e0a:	84 e4       	ldi	r24, 0x44	; 68
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>

	}

}
void StopWatch_StateMachine() {
	switch (stateMachine) {
     e14:	80 91 70 00 	lds	r24, 0x0070
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <main+0x14a>
     e1c:	52 c0       	rjmp	.+164    	; 0xec2 <main+0x1ee>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	08 f0       	brcs	.+2      	; 0xe24 <main+0x150>
     e22:	5b c0       	rjmp	.+182    	; 0xeda <main+0x206>
	case COUNT_UP:
		set_CallBack(Timer1_Counter_INC);
     e24:	8d e6       	ldi	r24, 0x6D	; 109
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
		GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
     e2c:	84 e4       	ldi	r24, 0x44	; 68
     e2e:	64 e0       	ldi	r22, 0x04	; 4
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
		GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
     e36:	84 e4       	ldi	r24, 0x44	; 68
     e38:	65 e0       	ldi	r22, 0x05	; 5
		Display_time();
		break;
	case COUNT_DOWN:
		set_CallBack(Timer1_Counter_DEC);
		GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
		GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
		GPIO_WritePin('A', ON_OFF_LED, HIGH);
     e40:	81 e4       	ldi	r24, 0x41	; 65
     e42:	66 e0       	ldi	r22, 0x06	; 6
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
	g_time[HOURS] = MIN_HOURS;
	g_time[MINS] = MIN_mins_sec;
	g_time[SECS] = MIN_mins_sec;
}
void Display_time() {
	g_disp_data[0] = (uint8_t) (g_time[HOURS] / 10);
     e4a:	80 91 64 00 	lds	r24, 0x0064
     e4e:	6a e0       	ldi	r22, 0x0A	; 10
     e50:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     e54:	80 93 6a 00 	sts	0x006A, r24
	g_disp_data[1] = g_time[HOURS] % 10;
     e58:	80 91 64 00 	lds	r24, 0x0064
     e5c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     e60:	90 93 6b 00 	sts	0x006B, r25
	g_disp_data[2] = (uint8_t) (g_time[MINS] / 10);
     e64:	80 91 63 00 	lds	r24, 0x0063
     e68:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     e6c:	80 93 6c 00 	sts	0x006C, r24
	g_disp_data[3] = g_time[MINS] % 10;
     e70:	80 91 63 00 	lds	r24, 0x0063
     e74:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     e78:	90 93 6d 00 	sts	0x006D, r25
	g_disp_data[4] = (uint8_t) (g_time[SECS] / 10);
     e7c:	80 91 62 00 	lds	r24, 0x0062
     e80:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     e84:	80 93 6e 00 	sts	0x006E, r24
	g_disp_data[5] = g_time[SECS] % 10;
     e88:	80 91 62 00 	lds	r24, 0x0062
     e8c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     e90:	90 93 6f 00 	sts	0x006F, r25

	Disp_7_Segment(g_disp_data);
     e94:	8a e6       	ldi	r24, 0x6A	; 106
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 a2 02 	call	0x544	; 0x544 <Disp_7_Segment>


	for (;;) {


		Handle_Button_Presses();
     e9c:	0e 94 4c 04 	call	0x898	; 0x898 <Handle_Button_Presses>
		}
	}

}
void Handle_End_Count_Down() {
	if (g_end_countdown_flag) {
     ea0:	80 91 68 00 	lds	r24, 0x0068
     ea4:	88 23       	and	r24, r24
     ea6:	09 f4       	brne	.+2      	; 0xeaa <main+0x1d6>
     ea8:	b0 cf       	rjmp	.-160    	; 0xe0a <main+0x136>
		stateMachine = PAUSE;
     eaa:	10 93 70 00 	sts	0x0070, r17
		GPIO_WritePin('D', BUZZER_PIN, HIGH);
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>

	}

}
void StopWatch_StateMachine() {
	switch (stateMachine) {
     eb8:	80 91 70 00 	lds	r24, 0x0070
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <main+0x1ee>
     ec0:	ae cf       	rjmp	.-164    	; 0xe1e <main+0x14a>
		GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
		GPIO_WritePin('A', ON_OFF_LED, HIGH);
		Display_time();
		break;
	case COUNT_DOWN:
		set_CallBack(Timer1_Counter_DEC);
     ec2:	8d e8       	ldi	r24, 0x8D	; 141
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
		GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
     eca:	84 e4       	ldi	r24, 0x44	; 68
     ecc:	65 e0       	ldi	r22, 0x05	; 5
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
		GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
     ed4:	84 e4       	ldi	r24, 0x44	; 68
     ed6:	64 e0       	ldi	r22, 0x04	; 4
     ed8:	b0 cf       	rjmp	.-160    	; 0xe3a <main+0x166>

	}

}
void StopWatch_StateMachine() {
	switch (stateMachine) {
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	09 f0       	breq	.+2      	; 0xee0 <main+0x20c>
     ede:	8e cf       	rjmp	.-228    	; 0xdfc <main+0x128>
		GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
		GPIO_WritePin('A', ON_OFF_LED, HIGH);
		Display_time();
		break;
	case PAUSE:
		Timer1_OFF();
     ee0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <Timer1_OFF>
		GPIO_WritePin('A', ON_OFF_LED, LOW);
     ee4:	81 e4       	ldi	r24, 0x41	; 65
     ee6:	66 e0       	ldi	r22, 0x06	; 6
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
	g_time[HOURS] = MIN_HOURS;
	g_time[MINS] = MIN_mins_sec;
	g_time[SECS] = MIN_mins_sec;
}
void Display_time() {
	g_disp_data[0] = (uint8_t) (g_time[HOURS] / 10);
     eee:	80 91 64 00 	lds	r24, 0x0064
     ef2:	6a e0       	ldi	r22, 0x0A	; 10
     ef4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     ef8:	80 93 6a 00 	sts	0x006A, r24
	g_disp_data[1] = g_time[HOURS] % 10;
     efc:	80 91 64 00 	lds	r24, 0x0064
     f00:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f04:	90 93 6b 00 	sts	0x006B, r25
	g_disp_data[2] = (uint8_t) (g_time[MINS] / 10);
     f08:	80 91 63 00 	lds	r24, 0x0063
     f0c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f10:	80 93 6c 00 	sts	0x006C, r24
	g_disp_data[3] = g_time[MINS] % 10;
     f14:	80 91 63 00 	lds	r24, 0x0063
     f18:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f1c:	90 93 6d 00 	sts	0x006D, r25
	g_disp_data[4] = (uint8_t) (g_time[SECS] / 10);
     f20:	80 91 62 00 	lds	r24, 0x0062
     f24:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f28:	80 93 6e 00 	sts	0x006E, r24
	g_disp_data[5] = g_time[SECS] % 10;
     f2c:	80 91 62 00 	lds	r24, 0x0062
     f30:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f34:	90 93 6f 00 	sts	0x006F, r25

	Disp_7_Segment(g_disp_data);
     f38:	8a e6       	ldi	r24, 0x6A	; 106
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 a2 02 	call	0x544	; 0x544 <Disp_7_Segment>
		break;
	case PAUSE:
		Timer1_OFF();
		GPIO_WritePin('A', ON_OFF_LED, LOW);
		Display_time();
		StopWatch_Adjust_Time();
     f40:	0e 94 b1 05 	call	0xb62	; 0xb62 <StopWatch_Adjust_Time>
     f44:	5b cf       	rjmp	.-330    	; 0xdfc <main+0x128>

00000f46 <StopWatch_StateMachine>:

	}

}
void StopWatch_StateMachine() {
	switch (stateMachine) {
     f46:	80 91 70 00 	lds	r24, 0x0070
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <StopWatch_StateMachine+0xa>
     f4e:	75 c0       	rjmp	.+234    	; 0x103a <StopWatch_StateMachine+0xf4>
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	e8 f5       	brcc	.+122    	; 0xfce <StopWatch_StateMachine+0x88>
	case COUNT_UP:
		set_CallBack(Timer1_Counter_INC);
     f54:	8d e6       	ldi	r24, 0x6D	; 109
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
		GPIO_WritePin('D', COUNT_UP_LED_D, HIGH);
     f5c:	84 e4       	ldi	r24, 0x44	; 68
     f5e:	64 e0       	ldi	r22, 0x04	; 4
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
		GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
     f66:	84 e4       	ldi	r24, 0x44	; 68
     f68:	65 e0       	ldi	r22, 0x05	; 5
		Display_time();
		break;
	case COUNT_DOWN:
		set_CallBack(Timer1_Counter_DEC);
		GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
		GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
		GPIO_WritePin('A', ON_OFF_LED, HIGH);
     f70:	81 e4       	ldi	r24, 0x41	; 65
     f72:	66 e0       	ldi	r22, 0x06	; 6
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
	g_time[HOURS] = MIN_HOURS;
	g_time[MINS] = MIN_mins_sec;
	g_time[SECS] = MIN_mins_sec;
}
void Display_time() {
	g_disp_data[0] = (uint8_t) (g_time[HOURS] / 10);
     f7a:	80 91 64 00 	lds	r24, 0x0064
     f7e:	6a e0       	ldi	r22, 0x0A	; 10
     f80:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f84:	80 93 6a 00 	sts	0x006A, r24
	g_disp_data[1] = g_time[HOURS] % 10;
     f88:	80 91 64 00 	lds	r24, 0x0064
     f8c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f90:	90 93 6b 00 	sts	0x006B, r25
	g_disp_data[2] = (uint8_t) (g_time[MINS] / 10);
     f94:	80 91 63 00 	lds	r24, 0x0063
     f98:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     f9c:	80 93 6c 00 	sts	0x006C, r24
	g_disp_data[3] = g_time[MINS] % 10;
     fa0:	80 91 63 00 	lds	r24, 0x0063
     fa4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     fa8:	90 93 6d 00 	sts	0x006D, r25
	g_disp_data[4] = (uint8_t) (g_time[SECS] / 10);
     fac:	80 91 62 00 	lds	r24, 0x0062
     fb0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     fb4:	80 93 6e 00 	sts	0x006E, r24
	g_disp_data[5] = g_time[SECS] % 10;
     fb8:	80 91 62 00 	lds	r24, 0x0062
     fbc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     fc0:	90 93 6f 00 	sts	0x006F, r25

	Disp_7_Segment(g_disp_data);
     fc4:	8a e6       	ldi	r24, 0x6A	; 106
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 a2 02 	call	0x544	; 0x544 <Disp_7_Segment>
     fcc:	08 95       	ret

	}

}
void StopWatch_StateMachine() {
	switch (stateMachine) {
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <StopWatch_StateMachine+0x8e>
     fd2:	08 95       	ret
		GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
		GPIO_WritePin('A', ON_OFF_LED, HIGH);
		Display_time();
		break;
	case PAUSE:
		Timer1_OFF();
     fd4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <Timer1_OFF>
		GPIO_WritePin('A', ON_OFF_LED, LOW);
     fd8:	81 e4       	ldi	r24, 0x41	; 65
     fda:	66 e0       	ldi	r22, 0x06	; 6
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
	g_time[HOURS] = MIN_HOURS;
	g_time[MINS] = MIN_mins_sec;
	g_time[SECS] = MIN_mins_sec;
}
void Display_time() {
	g_disp_data[0] = (uint8_t) (g_time[HOURS] / 10);
     fe2:	80 91 64 00 	lds	r24, 0x0064
     fe6:	6a e0       	ldi	r22, 0x0A	; 10
     fe8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     fec:	80 93 6a 00 	sts	0x006A, r24
	g_disp_data[1] = g_time[HOURS] % 10;
     ff0:	80 91 64 00 	lds	r24, 0x0064
     ff4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
     ff8:	90 93 6b 00 	sts	0x006B, r25
	g_disp_data[2] = (uint8_t) (g_time[MINS] / 10);
     ffc:	80 91 63 00 	lds	r24, 0x0063
    1000:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
    1004:	80 93 6c 00 	sts	0x006C, r24
	g_disp_data[3] = g_time[MINS] % 10;
    1008:	80 91 63 00 	lds	r24, 0x0063
    100c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
    1010:	90 93 6d 00 	sts	0x006D, r25
	g_disp_data[4] = (uint8_t) (g_time[SECS] / 10);
    1014:	80 91 62 00 	lds	r24, 0x0062
    1018:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
    101c:	80 93 6e 00 	sts	0x006E, r24
	g_disp_data[5] = g_time[SECS] % 10;
    1020:	80 91 62 00 	lds	r24, 0x0062
    1024:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__udivmodqi4>
    1028:	90 93 6f 00 	sts	0x006F, r25

	Disp_7_Segment(g_disp_data);
    102c:	8a e6       	ldi	r24, 0x6A	; 106
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 a2 02 	call	0x544	; 0x544 <Disp_7_Segment>
		break;
	case PAUSE:
		Timer1_OFF();
		GPIO_WritePin('A', ON_OFF_LED, LOW);
		Display_time();
		StopWatch_Adjust_Time();
    1034:	0e 94 b1 05 	call	0xb62	; 0xb62 <StopWatch_Adjust_Time>
    1038:	08 95       	ret
		GPIO_WritePin('D', COUNT_DOWN_LED_D, LOW);
		GPIO_WritePin('A', ON_OFF_LED, HIGH);
		Display_time();
		break;
	case COUNT_DOWN:
		set_CallBack(Timer1_Counter_DEC);
    103a:	8d e8       	ldi	r24, 0x8D	; 141
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	0e 94 cf 09 	call	0x139e	; 0x139e <set_CallBack>
		GPIO_WritePin('D', COUNT_DOWN_LED_D, HIGH);
    1042:	84 e4       	ldi	r24, 0x44	; 68
    1044:	65 e0       	ldi	r22, 0x05	; 5
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_WritePin>
		GPIO_WritePin('D', COUNT_UP_LED_D, LOW);
    104c:	84 e4       	ldi	r24, 0x44	; 68
    104e:	64 e0       	ldi	r22, 0x04	; 4
    1050:	8c cf       	rjmp	.-232    	; 0xf6a <StopWatch_StateMachine+0x24>

00001052 <__vector_10>:
#include <stdint.h>

volatile uint64_t time_ms = 0;

ISR(TIMER0_COMP_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	1f 93       	push	r17
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    time_ms++;
    1076:	80 91 72 00 	lds	r24, 0x0072
    107a:	20 91 73 00 	lds	r18, 0x0073
    107e:	30 91 74 00 	lds	r19, 0x0074
    1082:	40 91 75 00 	lds	r20, 0x0075
    1086:	60 91 76 00 	lds	r22, 0x0076
    108a:	e0 91 77 00 	lds	r30, 0x0077
    108e:	a0 91 78 00 	lds	r26, 0x0078
    1092:	10 91 79 00 	lds	r17, 0x0079
    1096:	b8 2f       	mov	r27, r24
    1098:	bf 5f       	subi	r27, 0xFF	; 255
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	b8 17       	cp	r27, r24
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__vector_10+0x50>
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	f9 2f       	mov	r31, r25
    10a4:	f2 0f       	add	r31, r18
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	f2 17       	cp	r31, r18
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__vector_10+0x5c>
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	78 2f       	mov	r23, r24
    10b0:	73 0f       	add	r23, r19
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	73 17       	cp	r23, r19
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__vector_10+0x68>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	58 2f       	mov	r21, r24
    10bc:	54 0f       	add	r21, r20
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	54 17       	cp	r21, r20
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__vector_10+0x74>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	38 2f       	mov	r19, r24
    10c8:	36 0f       	add	r19, r22
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	36 17       	cp	r19, r22
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__vector_10+0x80>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	28 2f       	mov	r18, r24
    10d4:	2e 0f       	add	r18, r30
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	2e 17       	cp	r18, r30
    10da:	08 f0       	brcs	.+2      	; 0x10de <__vector_10+0x8c>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	98 2f       	mov	r25, r24
    10e0:	9a 0f       	add	r25, r26
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	9a 17       	cp	r25, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__vector_10+0x98>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	81 0f       	add	r24, r17
    10ec:	b0 93 72 00 	sts	0x0072, r27
    10f0:	f0 93 73 00 	sts	0x0073, r31
    10f4:	70 93 74 00 	sts	0x0074, r23
    10f8:	50 93 75 00 	sts	0x0075, r21
    10fc:	30 93 76 00 	sts	0x0076, r19
    1100:	20 93 77 00 	sts	0x0077, r18
    1104:	90 93 78 00 	sts	0x0078, r25
    1108:	80 93 79 00 	sts	0x0079, r24
}
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	1f 91       	pop	r17
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	0f 90       	pop	r0
    112c:	1f 90       	pop	r1
    112e:	18 95       	reti

00001130 <Timer0_Init_CTC_Mode>:
// Initiate timer 0 with prescale 64 and comp value 250 interrupt every 1 ms use millis(); to read time in ms;
void Timer0_Init_CTC_Mode(uint16_t a_tick0)
{
    sei();
    1130:	78 94       	sei
    TCNT0 = 0; // Set Timer initial value to 0
    1132:	12 be       	out	0x32, r1	; 50

    OCR0 = a_tick0; // Set Compare Value
    1134:	8c bf       	out	0x3c, r24	; 60

    TIMSK |= (1 << OCIE0); // Enable Timer0 Compare Interrupt
    1136:	89 b7       	in	r24, 0x39	; 57
    1138:	82 60       	ori	r24, 0x02	; 2
    113a:	89 bf       	out	0x39, r24	; 57

    TCCR0 = (1 << FOC0) | (1 << WGM01) | (1 << CS01)|(1 << CS00);
    113c:	8b e8       	ldi	r24, 0x8B	; 139
    113e:	83 bf       	out	0x33, r24	; 51
}
    1140:	08 95       	ret

00001142 <millis>:
unsigned long long  millis()
{
    return time_ms;
    1142:	20 91 72 00 	lds	r18, 0x0072
    1146:	30 91 73 00 	lds	r19, 0x0073
    114a:	40 91 74 00 	lds	r20, 0x0074
    114e:	50 91 75 00 	lds	r21, 0x0075
    1152:	60 91 76 00 	lds	r22, 0x0076
    1156:	70 91 77 00 	lds	r23, 0x0077
    115a:	80 91 78 00 	lds	r24, 0x0078
    115e:	90 91 79 00 	lds	r25, 0x0079
}
    1162:	08 95       	ret

00001164 <delay>:
void delay(uint64_t a_time){
    1164:	2f 92       	push	r2
    1166:	3f 92       	push	r3
    1168:	4f 92       	push	r4
    116a:	5f 92       	push	r5
    116c:	6f 92       	push	r6
    116e:	7f 92       	push	r7
    1170:	8f 92       	push	r8
    1172:	9f 92       	push	r9
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	28 97       	sbiw	r28, 0x08	; 8
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	32 2e       	mov	r3, r18
    119a:	23 2e       	mov	r2, r19
    119c:	64 2e       	mov	r6, r20
    119e:	55 2e       	mov	r5, r21
    11a0:	46 2e       	mov	r4, r22
    11a2:	77 2e       	mov	r7, r23
    11a4:	4c 01       	movw	r8, r24
	sei();
    11a6:	78 94       	sei

    TCCR0 = (1 << FOC0) | (1 << WGM01) | (1 << CS01)|(1 << CS00);
}
unsigned long long  millis()
{
    return time_ms;
    11a8:	80 91 72 00 	lds	r24, 0x0072
    11ac:	90 91 73 00 	lds	r25, 0x0073
    11b0:	20 91 74 00 	lds	r18, 0x0074
    11b4:	30 91 75 00 	lds	r19, 0x0075
    11b8:	40 91 76 00 	lds	r20, 0x0076
    11bc:	50 91 77 00 	lds	r21, 0x0077
    11c0:	60 91 78 00 	lds	r22, 0x0078
    11c4:	70 91 79 00 	lds	r23, 0x0079
}
void delay(uint64_t a_time){
	sei();
	volatile unsigned long long previous=millis();
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	2b 83       	std	Y+3, r18	; 0x03
    11ce:	3c 83       	std	Y+4, r19	; 0x04
    11d0:	4d 83       	std	Y+5, r20	; 0x05
    11d2:	5e 83       	std	Y+6, r21	; 0x06
    11d4:	6f 83       	std	Y+7, r22	; 0x07
    11d6:	78 87       	std	Y+8, r23	; 0x08

    TCCR0 = (1 << FOC0) | (1 << WGM01) | (1 << CS01)|(1 << CS00);
}
unsigned long long  millis()
{
    return time_ms;
    11d8:	90 91 72 00 	lds	r25, 0x0072
    11dc:	40 91 73 00 	lds	r20, 0x0073
    11e0:	50 91 74 00 	lds	r21, 0x0074
    11e4:	70 91 75 00 	lds	r23, 0x0075
    11e8:	f0 91 76 00 	lds	r31, 0x0076
    11ec:	b0 91 77 00 	lds	r27, 0x0077
    11f0:	f0 90 78 00 	lds	r15, 0x0078
    11f4:	b0 90 79 00 	lds	r11, 0x0079
}
void delay(uint64_t a_time){
	sei();
	volatile unsigned long long previous=millis();
	while((millis()-previous)<=a_time){
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	3a 81       	ldd	r19, Y+2	; 0x02
    11fc:	6b 81       	ldd	r22, Y+3	; 0x03
    11fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1200:	1d 81       	ldd	r17, Y+5	; 0x05
    1202:	ee 80       	ldd	r14, Y+6	; 0x06
    1204:	df 80       	ldd	r13, Y+7	; 0x07
    1206:	c8 84       	ldd	r12, Y+8	; 0x08
    1208:	a9 2e       	mov	r10, r25
    120a:	a8 1a       	sub	r10, r24
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	9a 15       	cp	r25, r10
    1210:	08 f0       	brcs	.+2      	; 0x1214 <delay+0xb0>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	84 2f       	mov	r24, r20
    1216:	83 1b       	sub	r24, r19
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	48 17       	cp	r20, r24
    121c:	08 f0       	brcs	.+2      	; 0x1220 <delay+0xbc>
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	08 2f       	mov	r16, r24
    1222:	02 1b       	sub	r16, r18
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	80 17       	cp	r24, r16
    1228:	08 f0       	brcs	.+2      	; 0x122c <delay+0xc8>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	92 2b       	or	r25, r18
    122e:	85 2f       	mov	r24, r21
    1230:	86 1b       	sub	r24, r22
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	58 17       	cp	r21, r24
    1236:	08 f0       	brcs	.+2      	; 0x123a <delay+0xd6>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	a8 2f       	mov	r26, r24
    123c:	a9 1b       	sub	r26, r25
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	8a 17       	cp	r24, r26
    1242:	08 f0       	brcs	.+2      	; 0x1246 <delay+0xe2>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	29 2b       	or	r18, r25
    1248:	87 2f       	mov	r24, r23
    124a:	8e 1b       	sub	r24, r30
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	78 17       	cp	r23, r24
    1250:	08 f0       	brcs	.+2      	; 0x1254 <delay+0xf0>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	68 2f       	mov	r22, r24
    1256:	62 1b       	sub	r22, r18
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	86 17       	cp	r24, r22
    125c:	08 f0       	brcs	.+2      	; 0x1260 <delay+0xfc>
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	92 2b       	or	r25, r18
    1262:	8f 2f       	mov	r24, r31
    1264:	81 1b       	sub	r24, r17
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	f8 17       	cp	r31, r24
    126a:	08 f0       	brcs	.+2      	; 0x126e <delay+0x10a>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	58 2f       	mov	r21, r24
    1270:	59 1b       	sub	r21, r25
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	85 17       	cp	r24, r21
    1276:	08 f0       	brcs	.+2      	; 0x127a <delay+0x116>
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	29 2b       	or	r18, r25
    127c:	8b 2f       	mov	r24, r27
    127e:	8e 19       	sub	r24, r14
    1280:	31 e0       	ldi	r19, 0x01	; 1
    1282:	b8 17       	cp	r27, r24
    1284:	08 f0       	brcs	.+2      	; 0x1288 <delay+0x124>
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	48 2f       	mov	r20, r24
    128a:	42 1b       	sub	r20, r18
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	84 17       	cp	r24, r20
    1290:	08 f0       	brcs	.+2      	; 0x1294 <delay+0x130>
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	39 2b       	or	r19, r25
    1296:	8f 2d       	mov	r24, r15
    1298:	8d 19       	sub	r24, r13
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	f8 16       	cp	r15, r24
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <delay+0x13e>
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	28 2f       	mov	r18, r24
    12a4:	23 1b       	sub	r18, r19
    12a6:	32 2f       	mov	r19, r18
    12a8:	21 e0       	ldi	r18, 0x01	; 1
    12aa:	83 17       	cp	r24, r19
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <delay+0x14c>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	92 2b       	or	r25, r18
    12b2:	8b 2d       	mov	r24, r11
    12b4:	8c 19       	sub	r24, r12
    12b6:	89 1b       	sub	r24, r25
    12b8:	98 16       	cp	r9, r24
    12ba:	c8 f4       	brcc	.+50     	; 0x12ee <delay+0x18a>

	}
}
    12bc:	28 96       	adiw	r28, 0x08	; 8
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	3f 90       	pop	r3
    12ea:	2f 90       	pop	r2
    12ec:	08 95       	ret
    return time_ms;
}
void delay(uint64_t a_time){
	sei();
	volatile unsigned long long previous=millis();
	while((millis()-previous)<=a_time){
    12ee:	89 15       	cp	r24, r9
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <delay+0x190>
    12f2:	72 cf       	rjmp	.-284    	; 0x11d8 <delay+0x74>
    12f4:	83 16       	cp	r8, r19
    12f6:	10 f3       	brcs	.-60     	; 0x12bc <delay+0x158>
    12f8:	38 15       	cp	r19, r8
    12fa:	09 f0       	breq	.+2      	; 0x12fe <delay+0x19a>
    12fc:	6d cf       	rjmp	.-294    	; 0x11d8 <delay+0x74>
    12fe:	74 16       	cp	r7, r20
    1300:	e8 f2       	brcs	.-70     	; 0x12bc <delay+0x158>
    1302:	47 15       	cp	r20, r7
    1304:	09 f0       	breq	.+2      	; 0x1308 <delay+0x1a4>
    1306:	68 cf       	rjmp	.-304    	; 0x11d8 <delay+0x74>
    1308:	45 16       	cp	r4, r21
    130a:	c0 f2       	brcs	.-80     	; 0x12bc <delay+0x158>
    130c:	54 15       	cp	r21, r4
    130e:	09 f0       	breq	.+2      	; 0x1312 <delay+0x1ae>
    1310:	63 cf       	rjmp	.-314    	; 0x11d8 <delay+0x74>
    1312:	56 16       	cp	r5, r22
    1314:	98 f2       	brcs	.-90     	; 0x12bc <delay+0x158>
    1316:	65 15       	cp	r22, r5
    1318:	09 f0       	breq	.+2      	; 0x131c <delay+0x1b8>
    131a:	5e cf       	rjmp	.-324    	; 0x11d8 <delay+0x74>
    131c:	6a 16       	cp	r6, r26
    131e:	70 f2       	brcs	.-100    	; 0x12bc <delay+0x158>
    1320:	a6 15       	cp	r26, r6
    1322:	09 f0       	breq	.+2      	; 0x1326 <delay+0x1c2>
    1324:	59 cf       	rjmp	.-334    	; 0x11d8 <delay+0x74>
    1326:	20 16       	cp	r2, r16
    1328:	48 f2       	brcs	.-110    	; 0x12bc <delay+0x158>
    132a:	02 15       	cp	r16, r2
    132c:	09 f0       	breq	.+2      	; 0x1330 <delay+0x1cc>
    132e:	54 cf       	rjmp	.-344    	; 0x11d8 <delay+0x74>
    1330:	3a 14       	cp	r3, r10
    1332:	08 f0       	brcs	.+2      	; 0x1336 <delay+0x1d2>
    1334:	51 cf       	rjmp	.-350    	; 0x11d8 <delay+0x74>
    1336:	c2 cf       	rjmp	.-124    	; 0x12bc <delay+0x158>

00001338 <__vector_7>:




ISR(TIMER1_COMPA_vect)
{  PTR2_Timer1_CallBack();
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    135a:	e0 91 7a 00 	lds	r30, 0x007A
    135e:	f0 91 7b 00 	lds	r31, 0x007B
    1362:	09 95       	icall
    }
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <Timer1_Init_CTC_Mode>:
// Initiate timer 1 with prescale 1024 and comp value 15625 interrupt every 1 sec use time_Calculator(uint8_t*); to get time in hours minutes and seconds
void Timer1_Init_CTC_Mode(uint16_t a_tick_1)
{
    sei();
    1386:	78 94       	sei
    TCNT1 = 0; // Set Timer initial value to 0
    1388:	1d bc       	out	0x2d, r1	; 45
    138a:	1c bc       	out	0x2c, r1	; 44

    OCR1A = a_tick_1; // Set Compare Value
    138c:	9b bd       	out	0x2b, r25	; 43
    138e:	8a bd       	out	0x2a, r24	; 42

    TIMSK |= (1 << OCIE1A); // Enable Timer0 Compare Interrupt
    1390:	89 b7       	in	r24, 0x39	; 57
    1392:	80 61       	ori	r24, 0x10	; 16
    1394:	89 bf       	out	0x39, r24	; 57

    // TCCR1A |= (1<<FOC1A);
    TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
    1396:	8e b5       	in	r24, 0x2e	; 46
    1398:	8d 60       	ori	r24, 0x0D	; 13
    139a:	8e bd       	out	0x2e, r24	; 46
}
    139c:	08 95       	ret

0000139e <set_CallBack>:

// get time in ms from start of initiating timer0


void set_CallBack(void(*ptr2func)(void)){
	PTR2_Timer1_CallBack=ptr2func;
    139e:	90 93 7b 00 	sts	0x007B, r25
    13a2:	80 93 7a 00 	sts	0x007A, r24
}
    13a6:	08 95       	ret

000013a8 <Timer1_OFF>:
void Timer1_OFF(){
	CLR_BIT(TCCR1B,CS10);
    13a8:	8e b5       	in	r24, 0x2e	; 46
    13aa:	8e 7f       	andi	r24, 0xFE	; 254
    13ac:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
    13ae:	8e b5       	in	r24, 0x2e	; 46
    13b0:	8d 7f       	andi	r24, 0xFD	; 253
    13b2:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    13b4:	8e b5       	in	r24, 0x2e	; 46
    13b6:	8b 7f       	andi	r24, 0xFB	; 251
    13b8:	8e bd       	out	0x2e, r24	; 46
}
    13ba:	08 95       	ret

000013bc <Timer1_ON>:
void Timer1_ON(){
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
    13bc:	8e b5       	in	r24, 0x2e	; 46
    13be:	8d 60       	ori	r24, 0x0D	; 13
    13c0:	8e bd       	out	0x2e, r24	; 46
}
    13c2:	08 95       	ret

000013c4 <__udivmodqi4>:
    13c4:	99 1b       	sub	r25, r25
    13c6:	79 e0       	ldi	r23, 0x09	; 9
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <__udivmodqi4_ep>

000013ca <__udivmodqi4_loop>:
    13ca:	99 1f       	adc	r25, r25
    13cc:	96 17       	cp	r25, r22
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <__udivmodqi4_ep>
    13d0:	96 1b       	sub	r25, r22

000013d2 <__udivmodqi4_ep>:
    13d2:	88 1f       	adc	r24, r24
    13d4:	7a 95       	dec	r23
    13d6:	c9 f7       	brne	.-14     	; 0x13ca <__udivmodqi4_loop>
    13d8:	80 95       	com	r24
    13da:	08 95       	ret

000013dc <_exit>:
    13dc:	f8 94       	cli

000013de <__stop_program>:
    13de:	ff cf       	rjmp	.-2      	; 0x13de <__stop_program>
